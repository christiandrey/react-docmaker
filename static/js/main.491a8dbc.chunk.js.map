{"version":3,"sources":["../../src/modules/button/index.tsx","../../src/core/utils/index.ts","../../src/modules/header/index.tsx","../../src/core/contexts/orphan-nodes.ts","../../src/core/constants/index.ts","../../src/core/tools/index.ts","../../src/core/hooks/index.ts","../../src/modules/icon/index.tsx","../../src/modules/icon-button/index.tsx","../../src/modules/icon-group/index.tsx","../../src/modules/popup/content/index.tsx","../../src/modules/popup/index.tsx","../../src/modules/popups/text-size/index.tsx","../../src/modules/popups/color/index.tsx","../../src/modules/popups/image/index.tsx","../../src/modules/popups/image-size/index.tsx","../../src/modules/segmented-control/index.tsx","../../src/modules/field/index.tsx","../../src/modules/popups/editable/copy-existing/index.tsx","../../src/modules/switch/index.tsx","../../src/modules/popups/editable/create-new/index.tsx","../../src/modules/popups/editable/index.tsx","../../src/modules/popups/condition/index.tsx","../../src/modules/popups/orphan-nodes/index.tsx","../../src/modules/toolbar/index.tsx","../../src/modules/template-editor/index.tsx","../../src/core/plugins/paste-html.ts","../../src/modules/elements/image/index.tsx","../../src/modules/elements/editable/index.tsx","../../src/modules/template-element/index.tsx","../../src/modules/template-leaf/index.tsx","../../src/index.tsx","../../src/core/plugins/editable.ts","App.tsx","index.tsx"],"names":["Button","memo","onPress","onClick","className","classnames","test","nil","value","notNil","getImageSizeAsync","url","Promise","resolve","img","document","width","height","naturalHeight","clamp","min","max","Math","parseNumber","parsed","parseFloat","isNaN","formatDate","dateTime","token","format","Date","error","isHexColor","text","areEqualColors","left","right","generateUUID","uuidv4","Header","onPressSave","editorRef","useRef","state","innerRef","css","placeholder","html","current","onChange","event","onBlur","onChangeTitle","createdAt","toCapitalizedFirst","formatRelative","disabled","OrphanNodesContext","createContext","LIST_TYPES","HOT_KEYS","PRESET_COLORS","ALIGNMENTS","EDITABLE_DATA_TYPES","options","radio","date","time","DATE_FORMATS","TIME_FORMATS","isBlockActive","editor","match","n","Editor","SlateElement","isMarkActive","marks","nodesInSelection","getMatchingNodesInSelection","o","editableNodes","marksResolution","editablesResolution","includes","getColorMark","marksValue","editablesValue","toggleMarkActive","Transforms","hanging","toggleColorMarkActive","existingMark","color","toggleBlockActive","split","type","setBlockInactive","isList","newProperties","block","children","setBlockActive","focusEditor","ReactEditor","composeWithClassName","attributes","composeWithAlignmentClassName","alignment","composeWithStyle","style","getCurrentNode","selection","parentNode","getIndentation","currentNode","getIndentationPercent","composeWithEditable","editable","id","createEditableNode","isOrphan","editableNode","insertImageBlock","dimensions","imageNode","insertEditableBlock","getEditableAttributes","showTip","valueRef","parsedAttributes","dataType","defaultValue","getEditableAttributesValidity","copyExisting","label","tip","dateTimeFormat","getMatchingNodes","node","matching","child","generator","Array","usePopupUtils","initialOpen","useState","handleOpen","useCallback","setVisible","handleClose","handleToggle","popupActions","useMemo","visible","open","close","toggle","useEditor","useSlate","useAlignmentValue","getAlignment","useMouseDown","fn","e","useOrphanNodes","useContext","Icon","handlePress","onMouseDown","cloneElement","IconButton","forwardRef","ref","IconGroup","Content","hideArrow","x","y","useLayoutEffect","computedDimensions","JSON","setDimensions","onLayoutUpdate","composedClassName","arrowClassName","arrow","top","getViewportWidth","window","getViewportHeight","getPositioningWithoutAnchor","viewportWidth","viewportHeight","getValidPositioning","contentPosition","anchorElement","anchorRef","position","anchorY","anchorX","anchorWidth","anchorHeight","getPositioningWithAnchor","xOffset","offsets","yOffset","rightEdge","bottomEdge","Popup","onRequestClose","handleClickOverlay","handleKeyUp","isVisible","useEffect","transparent","contentClassName","popupContentPosition","setPopupContentPosition","distance","overlayCloseOnClick","TextSizeOption","active","TextSizePopup","handlePressOption","option","onPressOption","ColorBox","title","ColorPopup","handlePressColorOption","selectedColor","setColorState","onChangeColorOption","handleChangeInput","inputValue","parsedColor","key","maxLength","colorState","ImagePopup","onSubmitEditing","decimalScale","handleChangeImageUrl","setImageState","handleChangeScale","setScaleState","handleBlurImageInput","a","imageState","setImageDimensions","handleRequestClose","handlePressSubmit","imageDimensions","React","scaleState","ImageSizePopup","isValid","handleChangeWidth","setWidth","handleChangeHeight","setHeight","SegmentedControl","onChangeValue","i","Field","EditableCopyExisting","onSubmit","handleChangeValueRef","setValueRef","setDefaultValue","handleChangeDefaultValue","data","hidden","Switch","checked","offColor","onColor","checkedIcon","uncheckedIcon","handleDiameter","activeBoxShadow","EditableCreateNew","now","dataTypeOptions","Object","dateFormatOptions","timeFormatOptions","handlePressDeleteOption","eventualValue","index","setOptions","handlePressAddOption","editingOption","groundValue","setEditingOption","handleEditingOptionKeydown","multiline","handleChangeDataType","setDataType","setDateTimeFormat","handleChangeDateTimeFormat","handleChangeEditingOption","handleChangeLabel","setLabel","handleChangeTip","setTip","setMultiline","onKeyDown","setShowTip","setIsOrphan","EditablePopupProps","handleSubmit","setSegment","segment","ConditionPopup","parent","handleChangeParent","selected","setParent","setValue","handleChangeValue","OrphanNodesPopup","handlePressDelete","setOrphanNodes","orphanNodes","Toolbar","editorSelection","textSizePopupAnchorRef","colorPopupAnchorRef","imagePopupAnchorRef","imageSizePopupAnchorRef","conditionPopupAnchorRef","orphanNodesPopupAnchorRef","textSizePopup","colorPopup","imagePopup","imageSizePopup","editablePopup","conditionPopup","orphanNodesPopup","textSizeValue","headingOneActive","headingTwoActive","headingThreeActive","name","results","useTextSizeValue","leafColorValue","alignmentValue","canUndo","useCanUndo","canRedo","useCanRedo","conditionActive","handleChangeTextSizeOption","prevValue","handleChangeColorOption","focus","handleCreateImage","handleCreateEditableImage","handleCreateEditable","handleSetConditionActive","condition","setConditionActive","handlePressTextSize","handlePressColor","handlePressImage","handlePressEditableImage","handlePressInsertEditable","handlePressCondition","unsetConditionActive","handlePressInlineFormat","handlePressAlignment","setAlignment","handlePressIncreaseIndentation","indentation","increaseIndentation","handlePressDecreaseIndentation","decreaseIndentation","handlePressNumberedList","handlePressBulletedList","handlePressUndo","HistoryEditor","handlePressRedo","backgroundColor","TemplateEditor","ELEMENT_TAGS","A","element","BLOCKQUOTE","H1","H2","H3","H4","H5","H6","IMG","LI","OL","P","PRE","UL","TEXT_TAGS","CODE","code","DEL","strikethrough","EM","italic","I","S","STRONG","bold","U","underline","withHTML","isVoid","isInline","fragment","el","deserializeHTML","nodeName","jsx","attrs","DOMParser","parseFromString","insertData","ImageElement","useSelected","focused","useFocused","src","EditableElement","fontSize","contentEditable","TemplateElement","paddingLeft","href","TemplateLeaf","leaf","DocmakerEditor","onSubmitChanges","initialData","initialValue","withEditable","withReact","withHistory","createEditor","toDate","renderElement","props","renderLeaf","handleEditorKeydown","isHotkey","hotkey","handlePressSave","nodes","orphans","editorState","setEditorState","setTitle","spellCheck","App","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.491a8dbc.chunk.js","sourcesContent":["import React, { FC, memo, PropsWithChildren } from 'react'\nimport classnames from 'classnames'\n\ntype ButtonProps = PropsWithChildren<{\n  className?: string\n  disabled?: boolean\n  onPress?: Fn\n}>\n\nconst BaseButton: FC<ButtonProps> = ({\n  children,\n  className,\n  disabled,\n  onPress\n}) => {\n  return (\n    <button\n      onClick={onPress}\n      className={classnames(\n        'border-transparent rounded-default font-medium cursor-pointer text-white px-18 flex items-center justify-center transition-colors duration-250 hover:bg-blue-600',\n        {\n          'bg-blue-500': !disabled,\n          'pointer-events-none bg-blue-300': disabled,\n          'h-40': !/\\bh-[0-9]/gi.test(className)\n        },\n        className\n      )}\n    >\n      {children}\n    </button>\n  )\n}\n\nconst Button = memo(BaseButton)\n\nexport default Button\n","import { format } from 'date-fns'\nimport formatRelative from 'date-fns/formatRelative'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport type ValidDate = Date | string | number\n\nexport type ImageDimensions = {\n  width: number\n  height: number\n}\n\n// ----------------------------------------------------------------\n// UTILITY\n// ----------------------------------------------------------------\n\nexport function nil<T>(value: T): boolean {\n  return typeof value === 'undefined' || value === null\n}\n\nexport function notNil<T>(value: T): boolean {\n  return !nil(value)\n}\n\nexport function getImageSizeAsync(url: string): Promise<ImageDimensions> {\n  if (!url) {\n    return null\n  }\n\n  return new Promise((resolve) => {\n    const img = document.createElement('img')\n\n    img.onload = () => {\n      resolve({ width: img.naturalWidth, height: img.naturalHeight })\n    }\n\n    img.onerror = () => {\n      resolve(null)\n    }\n\n    img.src = url\n  })\n}\n\n// ----------------------------------------------------------------\n// NUMBER\n// ----------------------------------------------------------------\nexport function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n\nexport function parseNumber(value: string): number {\n  if (nil(value)) {\n    return null\n  }\n\n  const parsed = parseFloat(value)\n  return isNaN(parsed) ? 0 : parsed\n}\n\n// ----------------------------------------------------------------\n// DATETIME\n// ----------------------------------------------------------------\n\nexport function fromNow(dateTime: ValidDate): string {\n  return formatRelative(new Date(dateTime), new Date())\n}\n\nexport function formatDate(dateTime: ValidDate, token = 'yyyy-MM-dd'): string {\n  if (nil(dateTime)) return undefined\n\n  try {\n    return format(\n      dateTime instanceof Date ? dateTime : new Date(dateTime),\n      token\n    )\n  } catch (error) {\n    return undefined\n  }\n}\n\nexport function toDate(dateTime: ValidDate): Date {\n  if (!dateTime) {\n    return new Date()\n  }\n\n  return dateTime instanceof Date ? dateTime : new Date(dateTime)\n}\n\n// ----------------------------------------------------------------\n// STRING\n// ----------------------------------------------------------------\n\nexport function toTitleCase(text: string) {\n  if (nil(text)) {\n    return text\n  }\n  return `${text[0]?.toUpperCase()}${text?.substr(1).toLowerCase()}`\n}\n\nexport function toCapitalizedFirst(text: string) {\n  if (nil(text)) {\n    return text\n  }\n  return `${text[0]?.toUpperCase()}${text?.substr(1)}`\n}\n\nexport function stripHTMLEntities(text: string) {\n  return text\n    ?.replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/\"/g, '&nbsp;')\n}\n\nexport function isHexColor(text: string) {\n  return /^#([0-9A-F]{3}){1,2}$/i.test(text)\n}\n\nexport function areEqualColors(left: string, right: string) {\n  left = left?.replace(/^#/gi, '')?.toLowerCase()\n  right = right?.replace(/^#/gi, '')?.toLowerCase()\n\n  return left === right\n}\n\nexport function getPlaceholderImage(width: number, height?: number) {\n  return `https://dummyimage.com/${width}x${height || width}/326FF3/FFFFFF`\n}\n\nexport function generateUUID() {\n  return uuidv4()\n}\n","import React, { FC, useRef } from 'react'\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable'\nimport Button from '../button'\nimport classnames from 'classnames'\nimport css from './style.module.css'\nimport { fromNow, toCapitalizedFirst } from '../../core/utils'\n\ntype HeaderProps = {\n  title?: string\n  createdAt?: string\n  onChangeTitle?: (value: string) => void\n  onPressSave?: Fn\n}\n\nconst Header: FC<HeaderProps> = ({\n  title,\n  createdAt,\n  onChangeTitle,\n  onPressSave\n}) => {\n  const editorRef = useRef(null)\n  const state = useRef(title)\n\n  const handleBlur = () => {\n    onChangeTitle?.(state.current)\n  }\n\n  const handleChange = (event: ContentEditableEvent) => {\n    const value = event.target.value\n    state.current = value\n\n    if (value === '<br>') {\n      editorRef.current.innerHTML = ''\n    }\n  }\n\n  return (\n    <div className='bg-white py-18 px-60 flex items-center justify-between'>\n      <div>\n        <ContentEditable\n          innerRef={editorRef}\n          className={classnames(\n            css.container,\n            'text-heading-2 font-medium mb-4'\n          )}\n          placeholder='Untitled document'\n          html={state.current}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n        {createdAt && (\n          <div className='font-medium text-gray-400 text-subhead'>\n            {toCapitalizedFirst(fromNow(createdAt))}\n          </div>\n        )}\n      </div>\n      <Button disabled={!state.current?.length} onPress={onPressSave}>\n        Save changes\n      </Button>\n    </div>\n  )\n}\n\nexport default Header\n","import { createContext, Dispatch, SetStateAction } from 'react'\nimport { Node } from 'slate'\n\nconst OrphanNodesContext = createContext<\n  [Array<Node>, Dispatch<SetStateAction<Array<Node>>>]\n>(null)\n\nexport default OrphanNodesContext\n","export const LIST_TYPES = ['numbered-list', 'bulleted-list']\n\nexport const HOT_KEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+shift+x': 'strikethrough'\n}\n\nexport const PRESET_COLORS = [\n  '#FF6900',\n  '#FCB900',\n  '#7BDCB5',\n  '#00D084',\n  '#8ED1FC',\n  '#326FF3',\n  '#ABB8C3',\n  '#EB144C',\n  '#F78DA7',\n  '#9900EF'\n]\n\nexport const ALIGNMENTS = {\n  left: 'left',\n  right: 'right',\n  center: 'center',\n  justify: 'justify'\n}\n\nexport const INDENTATION_FACTOR = 3\n\nexport const EDITABLE_DATA_TYPES = {\n  text: 'Text',\n  options: 'Dropdown',\n  radio: 'Radio',\n  date: 'Date',\n  time: 'Time'\n}\n\nexport const DATE_FORMATS = [\n  'do MMMM, yyyy',\n  'dd MMMM, yyyy',\n  'MMMM dd, yyyy',\n  'dd/MM/yyyy',\n  'MM/dd/yyyy',\n  'MMM d, yyyy',\n  'dd MMM, yy',\n  'dd-MM-yyyy',\n  'dd-MM-yy'\n]\n\nexport const TIME_FORMATS = ['hh:mm a', 'hh:mm aaaa', 'HH:mm']\n","import { Editor, Element as SlateElement, Node, Transforms } from 'slate'\nimport { ReactEditor } from 'slate-react'\nimport classnames from 'classnames'\nimport { CSSProperties } from 'react'\nimport { areEqualColors, clamp, generateUUID, nil, notNil } from '../utils'\nimport { INDENTATION_FACTOR, LIST_TYPES } from '../constants'\nimport { HistoryEditor } from 'slate-history'\nimport { ImageProps } from '../../modules/popups/image'\nimport { ImageElementType } from '../../modules/elements/image'\n\nexport type BlockAlignment = 'left' | 'center' | 'right' | 'justify'\n\nexport type LeafFormatType =\n  | 'bold'\n  | 'code'\n  | 'italic'\n  | 'underline'\n  | 'strikethrough'\n  | 'color'\n  | 'ref'\n\nexport type HeadingFormatType = 'heading-one' | 'heading-two' | 'heading-three'\n\nexport type ListFormatType = 'numbered-list' | 'bulleted-list'\n\nexport type QuoteFormatType = 'block-quote'\n\nexport type ElementFormatType =\n  | HeadingFormatType\n  | ListFormatType\n  | QuoteFormatType\n\nexport type SlateEditorType = Editor & ReactEditor & HistoryEditor\n\nexport type EditableElementType<T> = {\n  id?: string\n  editable?: true\n} & T\n\nexport type EditableDataType = 'text' | 'options' | 'radio' | 'time' | 'date'\n\nexport type EditableOption = {\n  id: string\n  label: string\n}\n\nexport type EditableRefAttributes = {\n  parent: string\n  value: string\n}\n\nexport type EditableAttributes = Partial<{\n  dataType: EditableDataType\n  dateTimeFormat: string\n  defaultValue: string\n  label: string\n  multiline: boolean\n  options: Array<EditableOption>\n  tip: string\n  valueRef: string\n  ref: EditableRefAttributes\n  isOrphan: boolean\n  children: Array<EditableAttributes & { text: string }>\n}>\n\nexport type DocmakerNode = EditableElementType<\n  EditableAttributes & { text: string }\n>\n\nexport type DocmakerData = Partial<{\n  title: string\n  createdAt: string\n  nodes: Array<DocmakerNode>\n  orphans: Array<DocmakerNode>\n}>\n\nexport function isBlockActive(\n  editor: SlateEditorType,\n  format: ElementFormatType\n) {\n  const [match] = Editor.nodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format\n  }) as any\n\n  return !!match\n}\n\nexport function isMarkActiveLegacy(\n  editor: SlateEditorType,\n  format: LeafFormatType\n) {\n  if (!editor) {\n    return null\n  }\n\n  const marks = Editor.marks(editor)\n\n  if (notNil(marks)) {\n    const value = marks[format]\n    return format === 'ref' ? notNil(value) : value === true\n  }\n\n  return false\n}\n\nexport function isMarkActive(editor: SlateEditorType, format: LeafFormatType) {\n  if (!editor) {\n    return null\n  }\n\n  const marks = Editor.marks(editor)\n  const nodesInSelection = getMatchingNodesInSelection(editor, (o) =>\n    Editor.isInline(editor, o)\n  )\n  const editableNodes = getMatchingNodesInSelection(\n    editor,\n    (o) => o.type === 'editable'\n  )\n\n  let marksResolution = false\n  let editablesResolution = false\n\n  if (notNil(marks)) {\n    const value = marks[format]\n    marksResolution = ['color', 'ref'].includes(format)\n      ? notNil(value)\n      : value === true\n  }\n\n  if (editableNodes?.length) {\n    editablesResolution = editableNodes\n      .map((o) =>\n        ['color', 'ref'].includes(format)\n          ? notNil(o[format])\n          : o[format] === true\n      )\n      .every((o) => o)\n  }\n\n  if (\n    nodesInSelection?.length &&\n    nodesInSelection.every((o) => editableNodes.includes(o))\n  ) {\n    return editablesResolution\n  }\n\n  return editableNodes?.length\n    ? editablesResolution && marksResolution\n    : marksResolution\n}\n\nexport function isColorMarkActive(editor: SlateEditorType) {\n  if (!editor) {\n    return null\n  }\n\n  const marks = Editor.marks(editor)\n  return marks ? notNil(marks.color) : false\n}\n\nexport function getColorMark(editor: SlateEditorType) {\n  if (!editor) {\n    return null\n  }\n\n  const marks = Editor.marks(editor)\n  const nodesInSelection = getMatchingNodesInSelection(editor, (o) =>\n    Editor.isInline(editor, o)\n  )\n  const editableNodes = getMatchingNodesInSelection(\n    editor,\n    (o) => o.type === 'editable'\n  )\n\n  const marksValue = marks?.color\n  let editablesValue = null\n\n  if (editableNodes?.length) {\n    editablesValue = editableNodes[0].color\n  }\n\n  if (\n    nodesInSelection?.length &&\n    nodesInSelection.every((o) => editableNodes.includes(o))\n  ) {\n    return editablesValue\n  }\n\n  return editableNodes?.length ? editablesValue : marksValue\n}\n\nexport function toggleMarkActiveLegacy(\n  editor: SlateEditorType,\n  format: LeafFormatType\n) {\n  const isActive = isMarkActive(editor, format)\n\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\nexport function toggleMarkActive(\n  editor: SlateEditorType,\n  format: LeafFormatType\n) {\n  const isActive = isMarkActive(editor, format)\n\n  if (isActive) {\n    Editor.removeMark(editor, format)\n    Transforms.unsetNodes(editor, format, {\n      match: (o) => Editor.isVoid(editor, o) && o.type === 'editable'\n    })\n  } else {\n    Transforms.setNodes(\n      editor,\n      { [format]: true },\n      {\n        match: (o) => Editor.isVoid(editor, o) && o.type === 'editable',\n        hanging: true\n      }\n    )\n    Editor.addMark(editor, format, true)\n  }\n}\n\nexport function toggleColorMarkActive(editor: SlateEditorType, value?: string) {\n  const existingMark = getColorMark(editor)\n\n  if (notNil(existingMark) && areEqualColors(existingMark, value)) {\n    Editor.removeMark(editor, 'color')\n    Transforms.unsetNodes(editor, 'color', {\n      match: (o) => Editor.isVoid(editor, o) && o.type === 'editable'\n    })\n  } else {\n    Transforms.setNodes(\n      editor,\n      { color: value },\n      {\n        match: (o) => Editor.isVoid(editor, o) && o.type === 'editable',\n        hanging: true\n      }\n    )\n    Editor.addMark(editor, 'color', value)\n  }\n}\n\nexport function toggleBlockActive(\n  editor: SlateEditorType,\n  format: ElementFormatType\n) {\n  const isActive = isBlockActive(editor, format)\n\n  if (isActive) {\n    setBlockInactive(editor)\n    return\n  }\n\n  setBlockActive(editor, format)\n}\n\nexport function setBlockActive(\n  editor: SlateEditorType,\n  format: ElementFormatType\n) {\n  const isList = LIST_TYPES.includes(format)\n\n  Transforms.unwrapNodes(editor, {\n    match: (n) =>\n      LIST_TYPES.includes(\n        !Editor.isEditor(n) && SlateElement.isElement(n) && (n.type as any)\n      ),\n    split: true\n  })\n\n  const newProperties: Partial<SlateElement> = {\n    type: isList ? 'list-item' : format\n  }\n\n  Transforms.setNodes(editor, newProperties)\n\n  if (isList) {\n    const block = { type: format, children: [] }\n    Transforms.wrapNodes(editor, block)\n  }\n}\n\nexport function setBlockInactive(editor: SlateEditorType) {\n  Transforms.unwrapNodes(editor, {\n    match: (n) =>\n      LIST_TYPES.includes(\n        !Editor.isEditor(n) && SlateElement.isElement(n) && (n.type as any)\n      ),\n    split: true\n  })\n\n  const newProperties: Partial<SlateElement> = {\n    type: 'paragraph'\n  }\n\n  Transforms.setNodes(editor, newProperties)\n}\n\nexport function focusEditor(editor: SlateEditorType) {\n  ReactEditor.focus(editor as ReactEditor)\n}\n\nexport function composeWithClassName(attributes: any, className?: string) {\n  return {\n    ...attributes,\n    className: classnames(attributes?.className, className)\n  }\n}\n\nexport function composeWithAlignmentClassName(\n  attributes: any,\n  alignment?: BlockAlignment,\n  className?: string\n) {\n  return {\n    ...attributes,\n    className: classnames(attributes?.className, className, {\n      'text-right': alignment === 'right',\n      'text-center': alignment === 'center',\n      'text-justify': alignment === 'justify'\n    })\n  }\n}\n\nexport function composeWithStyle(attributes: any, style: CSSProperties = {}) {\n  return {\n    ...attributes,\n    style: { ...(attributes?.style || {}), ...style }\n  }\n}\n\nexport function getCurrentNode(editor: SlateEditorType) {\n  const selection = editor?.selection\n\n  if (selection !== null && selection.anchor !== null) {\n    const parentNode = editor.children[selection.anchor.path[0]]\n\n    if (LIST_TYPES.includes(parentNode?.type as BlockAlignment)) {\n      return parentNode.children[selection.anchor.path[1]]\n    }\n\n    return parentNode\n  } else {\n    return null\n  }\n}\n\nexport function getAlignment(editor: SlateEditorType): BlockAlignment {\n  const currentNode = getCurrentNode(editor) as any\n  return currentNode?.alignment\n}\n\nexport function setAlignment(editor: SlateEditorType, value?: BlockAlignment) {\n  const alignment = value === 'left' ? null : value\n  const newProperties: Partial<SlateElement> = {\n    alignment\n  }\n\n  Transforms.setNodes(editor, newProperties)\n}\n\nexport function getIndentation(editor: SlateEditorType): number {\n  const currentNode = getCurrentNode(editor) as any\n  return currentNode?.indentation\n}\n\nexport function getIndentationPercent(value: number): string {\n  if (!value) {\n    return null\n  }\n\n  return `${value}%`\n}\n\nexport function increaseIndentation(editor: SlateEditorType) {\n  const currentIndentation = getIndentation(editor) || 0\n  const indentation = clamp(currentIndentation + INDENTATION_FACTOR, 0, 99)\n  const newProperties: Partial<SlateElement> = {\n    indentation\n  }\n\n  Transforms.setNodes(editor, newProperties)\n}\n\nexport function decreaseIndentation(editor: SlateEditorType) {\n  const currentIndentation = getIndentation(editor) || 0\n  const indentation = clamp(currentIndentation - INDENTATION_FACTOR, 0, 99)\n  const newProperties: Partial<SlateElement> = {\n    indentation: indentation === 0 ? null : indentation\n  }\n\n  Transforms.setNodes(editor, newProperties)\n}\n\nexport function composeWithEditable<T extends object>(\n  attributes: T\n): EditableElementType<T> {\n  if (nil(attributes)) {\n    return null\n  }\n\n  return {\n    ...attributes,\n    editable: true,\n    id: generateUUID()\n  }\n}\n\nexport function createEditableNode(\n  attributes: EditableAttributes,\n  isOrphan = false\n) {\n  let editableNode: SlateElement & EditableAttributes = {\n    type: 'editable',\n    ...attributes,\n    children: [{ text: '' }]\n  }\n\n  if (isOrphan) {\n    editableNode.isOrphan = isOrphan\n  }\n\n  editableNode = composeWithEditable(editableNode)\n\n  return editableNode\n}\n\nexport function insertImageBlock(\n  editor: SlateEditorType,\n  attributes: ImageProps,\n  editable?: boolean\n) {\n  const {\n    url,\n    dimensions: { width, height }\n  } = attributes\n\n  let imageNode: SlateElement & ImageElementType = {\n    type: 'image',\n    url,\n    width,\n    height,\n    children: [{ text: '' }]\n  }\n\n  if (editable) {\n    imageNode = composeWithEditable(imageNode)\n  }\n\n  Transforms.insertNodes(editor, imageNode)\n  Transforms.move(editor)\n}\n\nexport function insertEditableBlock(\n  editor: SlateEditorType,\n  attributes: EditableAttributes\n) {\n  const editableNode = createEditableNode(attributes)\n\n  Transforms.insertNodes(editor, editableNode)\n  Transforms.move(editor)\n}\n\nexport function getEditableAttributes(\n  attributes: EditableAttributes,\n  showTip = false\n) {\n  const {\n    dataType,\n    dateTimeFormat,\n    multiline,\n    defaultValue,\n    label,\n    options,\n    tip,\n    valueRef\n  } = attributes\n\n  const parsedAttributes = {\n    dataType,\n    defaultValue\n  } as EditableAttributes\n\n  if (valueRef?.length) {\n    parsedAttributes.valueRef = valueRef\n    return parsedAttributes\n  }\n\n  if (showTip) {\n    parsedAttributes.tip = tip\n  }\n\n  if (dataType === 'text' && multiline) {\n    parsedAttributes.multiline = multiline\n  }\n\n  if (['options', 'radio'].includes(dataType)) {\n    parsedAttributes.options = options\n  }\n\n  if (['date', 'time'].includes(dataType)) {\n    parsedAttributes.dateTimeFormat = dateTimeFormat\n  }\n\n  parsedAttributes.label = label\n\n  return parsedAttributes\n}\n\nexport function getEditableAttributesValidity(\n  attributes: EditableAttributes,\n  showTip = false,\n  copyExisting = false\n): boolean {\n  const {\n    dataType,\n    dateTimeFormat,\n    defaultValue,\n    label,\n    options,\n    tip,\n    valueRef\n  } = attributes\n\n  if (copyExisting) {\n    return !!valueRef?.length && !!defaultValue?.length\n  }\n\n  if (\n    !dataType?.length ||\n    !defaultValue?.length ||\n    !label?.length ||\n    (showTip && !tip.length)\n  ) {\n    return false\n  }\n\n  if (['options', 'radio'].includes(dataType)) {\n    return !!options?.length\n  }\n\n  if (['date', 'time'].includes(dataType)) {\n    return !!dateTimeFormat?.length\n  }\n\n  return true\n}\n\nexport function getMatchingNodes(\n  node: Node,\n  match: (node: Node) => boolean = () => true,\n  matching: Array<Node> = []\n) {\n  if (match(node)) {\n    matching.push(node)\n  }\n\n  const children = node.children as Array<Node>\n\n  if (children?.length) {\n    for (const child of children) {\n      getMatchingNodes(child, match, matching)\n    }\n  }\n\n  return matching\n}\n\nexport function getMatchingNodesInSelection(\n  node: SlateEditorType,\n  match: (node: Node) => boolean = () => true\n) {\n  const generator = Editor.nodes(node, {\n    match\n  })\n\n  return Array.from(generator).map((o) => o[0])\n}\n\nexport function setConditionActive(\n  editor: SlateEditorType,\n  condition: EditableRefAttributes\n) {\n  Editor.addMark(editor, 'ref', condition)\n  Transforms.setNodes(\n    editor,\n    { ref: condition },\n    {\n      match: (o) => Editor.isVoid(editor, o) && o.type === 'editable'\n    }\n  )\n}\n\nexport function unsetConditionActive(editor: SlateEditorType) {\n  Editor.removeMark(editor, 'ref')\n  Transforms.unsetNodes(editor, 'ref', {\n    match: (o) => Editor.isVoid(editor, o) && o.type === 'editable'\n  })\n}\n","import { useState, useCallback, useMemo, MouseEvent, useContext } from 'react'\nimport { useSlate } from 'slate-react'\nimport OrphanNodesContext from '../contexts/orphan-nodes'\nimport {\n  BlockAlignment,\n  getAlignment,\n  getColorMark,\n  HeadingFormatType,\n  isBlockActive,\n  isMarkActive,\n  SlateEditorType\n} from '../tools'\n\ntype PopupActions = {\n  visible: boolean\n  open: Fn\n  close: Fn\n  toggle: Fn\n}\n\nexport type TextSizeValue = {\n  name: HeadingFormatType\n  label: string\n  value: boolean\n}\n\nexport function usePopupUtils(initialOpen: boolean = false): PopupActions {\n  const [visible, setVisible] = useState(initialOpen)\n\n  const handleOpen = useCallback(() => {\n    setVisible(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setVisible(false)\n  }, [])\n\n  const handleToggle = useCallback(() => {\n    setVisible((o) => !o)\n  }, [])\n\n  const popupActions: PopupActions = useMemo(\n    () => ({\n      visible,\n      open: handleOpen,\n      close: handleClose,\n      toggle: handleToggle\n    }),\n    [handleClose, handleOpen, handleToggle, visible]\n  )\n\n  return popupActions\n}\n\nexport function useEditor(): SlateEditorType {\n  return useSlate() as SlateEditorType\n}\n\nexport function useTextSizeValue(): TextSizeValue {\n  const editor = useEditor()\n\n  const headingOneActive = isBlockActive(editor, 'heading-one')\n  const headingTwoActive = isBlockActive(editor, 'heading-two')\n  const headingThreeActive = isBlockActive(editor, 'heading-three')\n\n  const results = useMemo(\n    () =>\n      [\n        { name: 'heading-one', label: 'Heading 1', value: headingOneActive },\n        { name: 'heading-two', label: 'Heading 2', value: headingTwoActive },\n        { name: 'heading-three', label: 'Heading 3', value: headingThreeActive }\n      ] as Array<TextSizeValue>,\n    [headingOneActive, headingThreeActive, headingTwoActive]\n  )\n\n  return results.find((o) => o.value)\n}\n\nexport function useLeafColorValue(): string {\n  const editor = useEditor()\n  return getColorMark(editor)\n}\n\nexport function useAlignmentValue(): BlockAlignment {\n  const editor = useEditor()\n  return getAlignment(editor)\n}\n\nexport function useMouseDown(fn: Fn): (e: MouseEvent) => void {\n  return useCallback(\n    (e: MouseEvent) => {\n      e?.preventDefault()\n      fn?.()\n    },\n    [fn]\n  )\n}\n\nexport function useCanUndo(): boolean {\n  const editor = useEditor()\n  return !!editor.history?.undos?.length\n}\n\nexport function useCanRedo(): boolean {\n  const editor = useEditor()\n  return !!editor.history?.redos?.length\n}\n\nexport function useConditionActive(): boolean {\n  const editor = useEditor()\n  return isMarkActive(editor, 'ref')\n}\n\nexport function useOrphanNodes() {\n  const context = useContext(OrphanNodesContext)\n  return context\n}\n","import React, {\n  Children,\n  cloneElement,\n  FC,\n  memo,\n  PropsWithChildren,\n  ReactElement\n} from 'react'\nimport classnames from 'classnames'\nimport { useMouseDown } from '../../core/hooks'\n\ntype IconProps = PropsWithChildren<{\n  className?: string\n  onPress?: Fn\n}>\n\nconst BaseIcon: FC<IconProps> = ({ children, className, onPress }) => {\n  const handlePress = useMouseDown(onPress)\n  return (\n    <figure\n      onMouseDown={handlePress}\n      className={classnames('flex-shrink-0', className, {\n        's-16': !/\\bs-[0-9]/gi.test(className)\n      })}\n    >\n      {Children.map(children, (child: ReactElement) =>\n        cloneElement(child, {\n          className: classnames(\n            child.props.className,\n            'h-full w-full object-contain object-center m-auto pointer-events-none'\n          )\n        })\n      )}\n    </figure>\n  )\n}\n\nconst Icon = memo(BaseIcon)\n\nexport default Icon\n","import React, { forwardRef, ReactNode, Ref } from 'react'\nimport Icon from '../icon'\nimport classnames from 'classnames'\nimport { useMouseDown } from '../../core/hooks'\n\ntype IconButtonProps = {\n  active?: boolean\n  disabled?: boolean\n  className?: string\n  data?: string\n  onPress?: Fn\n  children?: ReactNode\n}\n\nconst BaseIconButton = (\n  { active, data, disabled, className, children, onPress }: IconButtonProps,\n  ref: Ref<HTMLDivElement>\n) => {\n  const handlePress = useMouseDown(() => {\n    onPress?.(data)\n  })\n\n  return (\n    <div\n      ref={ref}\n      className={classnames(\n        's-32 rounded-default bg-transparent cursor-pointer flex items-center justify-center transition-colors duration-250 hover:bg-blue-100 hover:text-blue-500',\n        {\n          'text-blue-500 bg-blue-highlight': active,\n          'pointer-events-none opacity-50': disabled\n        },\n        className\n      )}\n      onMouseDown={handlePress}\n    >\n      <Icon className='s-20'>{children}</Icon>\n    </div>\n  )\n}\n\nconst IconButton = forwardRef(BaseIconButton)\n\nexport default IconButton\n","import React, { FC } from 'react'\n\nconst IconGroup: FC = ({ children }) => {\n  return <div className='px-16 flex items-center space-x-4'>{children}</div>\n}\n\nexport default IconGroup\n","import classnames from 'classnames'\nimport React, { useLayoutEffect, useState } from 'react'\n\nimport css from './style.module.css'\n\nexport type ContentDimensions = {\n  width?: number\n  height?: number\n  x?: number\n  y?: number\n}\n\ntype ContentProps = {\n  onLayoutUpdate: (dimensions: ContentDimensions) => void\n  x?: number\n  y?: number\n  hideArrow?: boolean\n  position?: string\n  alignment?: string\n  className?: string\n}\n\nconst Content: React.FC<ContentProps> = ({\n  onLayoutUpdate,\n  children,\n  x,\n  y,\n  position,\n  alignment,\n  className,\n  hideArrow\n}) => {\n  const [dimensions, setDimensions] = useState<ContentDimensions>({ x, y })\n\n  useLayoutEffect(() => {\n    const element = document.querySelector(`.${css.container}`)\n    const { width, height, x, y } = element.getBoundingClientRect()\n    const computedDimensions: ContentDimensions = { width, height, x, y }\n\n    if (JSON.stringify(computedDimensions) !== JSON.stringify(dimensions)) {\n      setDimensions(computedDimensions)\n      onLayoutUpdate(computedDimensions)\n    }\n  }, [dimensions, onLayoutUpdate])\n\n  let composedClassName = css.container\n  const arrowClassName = ` ${css.arrow} ${css[`arrow${position}`]} ${\n    css[`arrow${alignment}`]\n  }`\n\n  if (!hideArrow) composedClassName += arrowClassName\n\n  return (\n    <div\n      className={classnames(composedClassName, 'shadow-6', className)}\n      style={{ top: y, left: x }}\n    >\n      {children}\n    </div>\n  )\n}\n\nContent.defaultProps = {\n  x: 0,\n  y: 0\n}\n\nexport default Content\n","import React, {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { useMouseDown } from '../../core/hooks'\n\nimport Content, { ContentDimensions } from './content'\n\nexport type AnchorRef = MutableRefObject<Element>\n\nexport type PopupPosition = 'up' | 'right' | 'down' | 'left' | 'center'\n\nexport type PopupAlignment = 'start' | 'center' | 'end'\n\ntype PopupOffset = {\n  x: number\n  y: number\n}\n\ntype PopupContentPosition = {\n  x: number\n  y: number\n}\n\ntype PopupProps = {\n  anchor?: string\n  anchorRef?: AnchorRef\n  contentClassName?: string\n  position?: PopupPosition\n  alignment?: PopupAlignment\n  transparent?: boolean\n  distance?: number\n  offsets?: PopupOffset\n  hideArrow?: boolean\n  isVisible?: boolean\n  overlayCloseOnClick?: boolean\n  onRequestClose: () => void\n}\n\nconst EDGE_PADDING = 12\n\nconst getViewportWidth = () =>\n  window.innerWidth ||\n  document.documentElement.clientWidth ||\n  document.body.clientWidth\n\nconst getViewportHeight = () =>\n  window.innerHeight ||\n  document.documentElement.clientHeight ||\n  document.body.clientHeight\n\nconst getPositioningWithoutAnchor = (\n  dimensions: ContentDimensions,\n  position: PopupPosition,\n  alignment: PopupAlignment\n) => {\n  const viewportWidth = getViewportWidth()\n  const viewportHeight = getViewportHeight()\n  const { width, height } = dimensions\n\n  let x: number, y: number\n\n  switch (position) {\n    case 'up':\n      y = 0\n      break\n    case 'down':\n      y = viewportHeight - height\n      break\n    case 'center':\n      y = (viewportHeight - height) / 2\n      break\n    default:\n      y = 0\n      break\n  }\n\n  switch (alignment) {\n    case 'start':\n      x = 0\n      break\n    case 'center':\n      x = (viewportWidth - width) / 2\n      break\n    case 'end':\n      x = viewportWidth - width\n      break\n    default:\n      x = 0\n      break\n  }\n\n  return { x, y }\n}\n\nconst getPositioningWithAnchor = (\n  dimensions: ContentDimensions,\n  anchor: string,\n  anchorRef: AnchorRef,\n  distance: number,\n  position: PopupPosition,\n  alignment: PopupAlignment\n) => {\n  const anchorElement = anchorRef.current || document.querySelector(anchor)\n  if (!anchorElement)\n    return getPositioningWithoutAnchor(dimensions, position, alignment)\n\n  const {\n    width: anchorWidth,\n    height: anchorHeight,\n    x: anchorX,\n    y: anchorY\n  } = anchorElement.getBoundingClientRect()\n  const { width, height } = dimensions\n\n  let x: number, y: number\n\n  if (position === 'up') {\n    y = anchorY - height - distance\n\n    switch (alignment) {\n      case 'start':\n        x = anchorX\n        break\n      case 'center':\n        x = anchorX + anchorWidth / 2 - width / 2\n        break\n      case 'end':\n        x = anchorX + anchorWidth - width\n        break\n      default:\n        break\n    }\n  }\n\n  if (position === 'down') {\n    y = anchorY + anchorHeight + distance\n\n    switch (alignment) {\n      case 'start':\n        x = anchorX\n        break\n      case 'center':\n        x = anchorX + anchorWidth / 2 - width / 2\n        break\n      case 'end':\n        x = anchorX + anchorWidth - width\n        break\n      default:\n        break\n    }\n  }\n\n  if (position === 'left') {\n    x = anchorX - width - distance\n\n    switch (alignment) {\n      case 'start':\n        y = anchorY\n        break\n      case 'center':\n        y = anchorY + anchorHeight / 2 - height / 2\n        break\n      case 'end':\n        y = anchorY + anchorHeight - height\n        break\n      default:\n        break\n    }\n  }\n\n  if (position === 'right') {\n    x = anchorX + anchorWidth + distance\n\n    switch (alignment) {\n      case 'start':\n        y = anchorY\n        break\n      case 'center':\n        y = anchorY + anchorHeight / 2 - height / 2\n        break\n      case 'end':\n        y = anchorY + anchorHeight - height\n        break\n      default:\n        break\n    }\n  }\n\n  return { x, y }\n}\n\nconst getValidPositioning = (\n  dimensions: ContentDimensions,\n  anchor: string,\n  anchorRef: AnchorRef,\n  distance: number,\n  position: PopupPosition,\n  alignment: PopupAlignment,\n  offsets: PopupOffset\n) => {\n  const { width, height } = dimensions\n  const viewportWidth = getViewportWidth()\n  const viewportHeight = getViewportHeight()\n  let contentPosition: PopupContentPosition\n\n  if (!!anchor || !!anchorRef) {\n    contentPosition = getPositioningWithAnchor(\n      dimensions,\n      anchor,\n      anchorRef,\n      distance,\n      position,\n      alignment\n    )\n  } else {\n    contentPosition = getPositioningWithoutAnchor(\n      dimensions,\n      position,\n      alignment\n    )\n  }\n\n  if (offsets) {\n    const xOffset = offsets.x || 0\n    const yOffset = offsets.y || 0\n\n    contentPosition.x = contentPosition.x + xOffset\n    contentPosition.y = contentPosition.y + yOffset\n  }\n\n  const leftEdge = EDGE_PADDING\n  const topEdge = EDGE_PADDING\n  const rightEdge = viewportWidth - width\n  const bottomEdge = viewportHeight - height\n\n  if (contentPosition.x <= leftEdge) contentPosition.x = leftEdge\n  if (contentPosition.y <= topEdge) contentPosition.y = topEdge\n  if (contentPosition.x >= rightEdge) contentPosition.x = rightEdge\n  if (contentPosition.y >= bottomEdge) contentPosition.y = bottomEdge\n\n  return contentPosition\n}\n\nconst Popup: React.FC<PopupProps> = ({\n  anchor,\n  anchorRef,\n  children,\n  contentClassName,\n  position,\n  alignment,\n  transparent,\n  distance,\n  offsets,\n  isVisible,\n  hideArrow,\n  overlayCloseOnClick,\n  onRequestClose\n}) => {\n  const [\n    popupContentPosition,\n    setPopupContentPosition\n  ] = useState<PopupContentPosition>({\n    x: 0,\n    y: 0\n  })\n\n  const handleClickOverlay = useMouseDown(() => {\n    if (overlayCloseOnClick) onRequestClose()\n  })\n\n  const handleKeyUp = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isVisible) onRequestClose()\n    },\n    [isVisible, onRequestClose]\n  )\n\n  useEffect(() => {\n    document.addEventListener('keyup', handleKeyUp)\n\n    return () => {\n      document.removeEventListener('keyup', handleKeyUp)\n    }\n  }, [isVisible, handleKeyUp])\n\n  if (!isVisible) return null\n\n  return (\n    <div className='fixed top-0 left-0 w-full h-full z-2'>\n      <div\n        className={\n          transparent\n            ? 'w-full h-full absolute top-0 left-0 z-0'\n            : 'w-full h-full absolute top-0 left-0 z-0 bg-blue-800 opacity-50'\n        }\n        onMouseDown={handleClickOverlay}\n      />\n      <Content\n        className={contentClassName}\n        x={popupContentPosition.x}\n        y={popupContentPosition.y}\n        position={position}\n        alignment={alignment}\n        hideArrow={(!anchorRef && !anchor) || hideArrow}\n        onLayoutUpdate={(dimensions) =>\n          setPopupContentPosition(\n            getValidPositioning(\n              dimensions,\n              anchor,\n              anchorRef,\n              distance,\n              position,\n              alignment,\n              offsets\n            )\n          )\n        }\n      >\n        {children}\n      </Content>\n    </div>\n  )\n}\n\nPopup.defaultProps = {\n  position: 'center',\n  alignment: 'center',\n  transparent: false,\n  distance: 10,\n  overlayCloseOnClick: true,\n  hideArrow: false,\n  isVisible: false\n}\n\nexport default Popup\n","import React, {\n  FC,\n  MutableRefObject,\n  PropsWithChildren,\n  useCallback\n} from 'react'\nimport Popup from '../../popup'\nimport classnames from 'classnames'\nimport { HeadingFormatType } from '../../../core/tools'\nimport { nil } from '../../../core/utils'\nimport { useMouseDown } from '../../../core/hooks'\n\ntype TextSizePopupProps = {\n  anchorRef: MutableRefObject<Element>\n  isVisible: boolean\n  value: HeadingFormatType\n  onPressOption?: (value: HeadingFormatType) => void\n  onRequestClose: Fn\n}\n\ntype TextSizeOptionProps = PropsWithChildren<{\n  active?: boolean\n  onPress?: Fn\n}>\n\nconst TextSizeOption: FC<TextSizeOptionProps> = ({\n  active,\n  children,\n  onPress\n}) => {\n  const handlePress = useMouseDown(onPress)\n\n  return (\n    <div\n      className={classnames(\n        'cursor-pointer h-40 px-20 flex items-center font-medium bg-transparent transition-colors duration-250 hover:bg-blue-100 hover:text-blue-500',\n        {\n          'text-blue-500 bg-blue-highlight': active\n        }\n      )}\n      onMouseDown={handlePress}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst TextSizePopup: FC<TextSizePopupProps> = ({\n  anchorRef,\n  isVisible,\n  value,\n  onPressOption,\n  onRequestClose\n}) => {\n  const handlePressOption = useCallback(\n    (option?: HeadingFormatType) => {\n      onPressOption?.(option)\n      onRequestClose?.()\n    },\n    [onPressOption, onRequestClose]\n  )\n\n  return (\n    <Popup\n      position='down'\n      alignment='start'\n      isVisible={isVisible}\n      onRequestClose={onRequestClose}\n      anchorRef={anchorRef}\n      transparent\n      hideArrow\n      overlayCloseOnClick\n      contentClassName='rounded-default'\n    >\n      <div className='rounded-default w-144 bg-white border border-gray-300 overflow-hidden text-gray-500'>\n        <TextSizeOption active={nil(value)} onPress={() => handlePressOption()}>\n          <span className='-ml-1'>Normal</span>\n        </TextSizeOption>\n        <TextSizeOption\n          active={value === 'heading-three'}\n          onPress={() => handlePressOption('heading-three')}\n        >\n          <span className='text-headline -ml-1'>Heading 3</span>\n        </TextSizeOption>\n        <TextSizeOption\n          active={value === 'heading-two'}\n          onPress={() => handlePressOption('heading-two')}\n        >\n          <span className='text-heading-3 -ml-1'>Heading 2</span>\n        </TextSizeOption>\n        <TextSizeOption\n          active={value === 'heading-one'}\n          onPress={() => handlePressOption('heading-one')}\n        >\n          <span className='text-heading-2 -ml-1'>Heading 1</span>\n        </TextSizeOption>\n      </div>\n    </Popup>\n  )\n}\n\nexport default TextSizePopup\n","import React, {\n  FC,\n  memo,\n  MutableRefObject,\n  useCallback,\n  useState,\n  ChangeEvent\n} from 'react'\nimport Popup from '../../popup'\nimport css from './style.module.css'\nimport classnames from 'classnames'\nimport { areEqualColors, isHexColor } from '../../../core/utils'\nimport { useMouseDown } from '../../../core/hooks'\nimport { PRESET_COLORS } from '../../../core/constants'\n\ntype ColorPopupProps = {\n  anchorRef: MutableRefObject<Element>\n  isVisible: boolean\n  value?: string\n  onChangeColorOption?: (value?: string, focus?: boolean) => void\n  onRequestClose: Fn\n}\n\ntype ColorBoxProps = {\n  active?: boolean\n  color: string\n  onPress?: (value: string) => void\n}\n\nconst BaseColorBox: FC<ColorBoxProps> = ({ active, color, onPress }) => {\n  const handlePress = useMouseDown(() => {\n    onPress?.(color)\n  })\n\n  return (\n    <div\n      style={{ color }}\n      onMouseDown={handlePress}\n      title={color}\n      className={classnames(\n        's-32 rounded-default bg-current cursor-pointer transition-shadow duration-250',\n        css['color-box'],\n        { [css.active]: active }\n      )}\n    />\n  )\n}\n\nconst ColorBox = memo(BaseColorBox)\n\nconst ColorPopup: FC<ColorPopupProps> = ({\n  anchorRef,\n  isVisible,\n  value,\n  onChangeColorOption,\n  onRequestClose\n}) => {\n  const [colorState, setColorState] = useState('')\n\n  const handlePressColorOption = useCallback(\n    (option: string) => {\n      if (!isHexColor(option)) {\n        return\n      }\n\n      const selectedColor = areEqualColors(value, option) ? null : option\n\n      setColorState(selectedColor?.replaceAll('#', ''))\n      onChangeColorOption?.(selectedColor)\n      onRequestClose?.()\n    },\n    [onChangeColorOption, onRequestClose, value]\n  )\n\n  const handleChangeInput = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      const inputValue = e.target.value\n      const parsedColor = inputValue?.length\n        ? `#${inputValue.replace('#', '')}`\n        : null\n\n      setColorState(e.target.value)\n\n      if (isHexColor(parsedColor)) {\n        onChangeColorOption?.(parsedColor, false)\n      }\n    },\n    [onChangeColorOption]\n  )\n\n  return (\n    <Popup\n      position='down'\n      alignment='start'\n      isVisible={isVisible}\n      onRequestClose={onRequestClose}\n      anchorRef={anchorRef}\n      transparent\n      hideArrow\n      overlayCloseOnClick\n      contentClassName='rounded-default'\n    >\n      <div className='rounded-default grid grid-cols-7 gap-6 p-8 bg-white border border-gray-300 overflow-hidden text-gray-500'>\n        {PRESET_COLORS.map((o) => (\n          <ColorBox\n            color={o}\n            key={o}\n            onPress={handlePressColorOption}\n            active={areEqualColors(value, o)}\n          />\n        ))}\n        <div className='h-32 col-span-4 overflow-hidden rounded-default border border-gray-200 flex items-center justify-start'>\n          <div className='flex s-32 rounded-default rounded-r-none rounded-b-none bg-gray-200 text-gray-500 items-center justify-center font-semibold'>\n            #\n          </div>\n          <input\n            maxLength={6}\n            className={classnames(\n              'border-none h-full px-6 bg-transparent font-medium',\n              css.input\n            )}\n            type='text'\n            placeholder={value?.replace('#', '')}\n            value={colorState}\n            onChange={handleChangeInput}\n          />\n        </div>\n      </div>\n    </Popup>\n  )\n}\n\nexport default ColorPopup\n","import React, {\n  ChangeEvent,\n  FC,\n  MutableRefObject,\n  useCallback,\n  useMemo,\n  useState\n} from 'react'\nimport Popup from '../../popup'\nimport { BiLink } from 'react-icons/bi'\nimport Icon from '../../icon'\nimport Button from '../../button'\nimport { getImageSizeAsync, ImageDimensions, nil } from '../../../core/utils'\n\nexport type ImageProps = {\n  url?: string\n  dimensions: ImageDimensions\n}\n\ntype ImagePopupProps = {\n  anchorRef: MutableRefObject<Element>\n  isVisible: boolean\n  onRequestClose: Fn\n  onSubmitEditing?: (value: ImageProps) => void\n}\n\nconst ImagePopup: FC<ImagePopupProps> = ({\n  anchorRef,\n  isVisible,\n  onRequestClose,\n  onSubmitEditing\n}) => {\n  const [imageState, setImageState] = useState('')\n  const [scaleState, setScaleState] = useState('100')\n  const [imageDimensions, setImageDimensions] = useState<ImageDimensions>()\n\n  const decimalScale = useMemo(() => {\n    const value = parseFloat(scaleState)\n    const normalized = isNaN(value) || value < 1 ? 1 : value\n    return normalized / 100\n  }, [scaleState])\n\n  const handleChangeImageUrl = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      setImageState(e.target.value)\n    },\n    []\n  )\n\n  const handleChangeScale = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setScaleState(e.target.value)\n  }, [])\n\n  const handleBlurImageInput = useCallback(async () => {\n    if (!imageState?.length) {\n      setImageDimensions(null)\n      return\n    }\n\n    try {\n      const dimensions = await getImageSizeAsync(imageState)\n      setImageDimensions(dimensions)\n    } catch (error) {\n      setImageDimensions(null)\n    }\n  }, [imageState])\n\n  const handleRequestClose = useCallback(() => {\n    setImageState('')\n    setScaleState('100')\n    setImageDimensions(null)\n    onRequestClose?.()\n  }, [onRequestClose])\n\n  const handlePressSubmit = useCallback(() => {\n    onSubmitEditing?.({\n      url: imageState,\n      dimensions: {\n        width: imageDimensions.width * decimalScale,\n        height: imageDimensions.height * decimalScale\n      }\n    })\n    handleRequestClose()\n  }, [\n    decimalScale,\n    handleRequestClose,\n    imageDimensions,\n    imageState,\n    onSubmitEditing\n  ])\n\n  return (\n    <Popup\n      position='down'\n      alignment='start'\n      isVisible={isVisible}\n      onRequestClose={handleRequestClose}\n      anchorRef={anchorRef}\n      transparent\n      hideArrow\n      overlayCloseOnClick\n      contentClassName='rounded-default'\n    >\n      <div className='rounded-default p-8 w-296 bg-white border border-gray-300 overflow-hidden text-gray-500'>\n        <div className='flex items-center justify-between space-x-4 mb-8'>\n          <div className='h-32 flex-1 overflow-hidden rounded-default border border-gray-200 flex items-center justify-start'>\n            <div className='flex s-32 rounded-default rounded-r-none rounded-b-none bg-gray-200 text-gray-500 items-center justify-center font-semibold'>\n              <Icon>\n                <BiLink />\n              </Icon>\n            </div>\n            <input\n              className='border-none h-full px-6 bg-transparent font-medium flex-1 min-w-0'\n              type='text'\n              placeholder='https://www...'\n              value={imageState}\n              onChange={handleChangeImageUrl}\n              onBlur={handleBlurImageInput}\n            />\n          </div>\n          <div className='h-32 overflow-hidden rounded-default border border-gray-200 flex items-center justify-start'>\n            <input\n              maxLength={3}\n              className='border-none h-full w-40 px-6 bg-transparent font-medium m-0'\n              placeholder='0'\n              value={scaleState}\n              onChange={handleChangeScale}\n            />\n            <div className='flex s-32 bg-transparent text-gray-300 items-center justify-center font-semibold'>\n              %\n            </div>\n          </div>\n        </div>\n        <div className='flex justify-end'>\n          <Button\n            disabled={nil(imageDimensions)}\n            className='h-32'\n            onPress={handlePressSubmit}\n          >\n            Insert\n          </Button>\n        </div>\n      </div>\n    </Popup>\n  )\n}\n\nexport default ImagePopup\n","import React, {\n  ChangeEvent,\n  FC,\n  MutableRefObject,\n  useCallback,\n  useState\n} from 'react'\nimport { ImageDimensions, notNil, parseNumber } from '../../../core/utils'\nimport Button from '../../button'\nimport Popup from '../../popup'\nimport { TiTimes } from 'react-icons/ti'\nimport Icon from '../../icon'\n\ntype ImageSizePopupProps = {\n  anchorRef: MutableRefObject<Element>\n  isVisible: boolean\n  onRequestClose: Fn\n  onSubmitEditing?: (value: ImageDimensions) => void\n}\n\nconst ImageSizePopup: FC<ImageSizePopupProps> = ({\n  anchorRef,\n  isVisible,\n  onRequestClose,\n  onSubmitEditing\n}) => {\n  const [width, setWidth] = useState(100)\n  const [height, setHeight] = useState(100)\n\n  const isValid = notNil(width) && notNil(height) && width * height > 0\n\n  const handleChangeWidth = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setWidth(parseNumber(e.target.value))\n  }, [])\n\n  const handleChangeHeight = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setWidth(parseNumber(e.target.value))\n  }, [])\n\n  const handleRequestClose = useCallback(() => {\n    setWidth(100)\n    setHeight(100)\n    onRequestClose?.()\n  }, [onRequestClose])\n\n  const handlePressSubmit = useCallback(() => {\n    onSubmitEditing?.({\n      width,\n      height\n    })\n    handleRequestClose()\n  }, [handleRequestClose, height, onSubmitEditing, width])\n\n  return (\n    <Popup\n      position='down'\n      alignment='start'\n      isVisible={isVisible}\n      onRequestClose={handleRequestClose}\n      anchorRef={anchorRef}\n      transparent\n      hideArrow\n      overlayCloseOnClick\n      contentClassName='rounded-default'\n    >\n      <div className='rounded-default p-8 bg-white border border-gray-300 overflow-hidden text-gray-500'>\n        <div className='flex items-center justify-between space-x-4 mb-8'>\n          <div className='h-32 overflow-hidden rounded-default border border-gray-200 flex items-center justify-start'>\n            <input\n              className='border-none h-full w-40 px-6 bg-transparent font-medium m-0'\n              placeholder='0'\n              value={width}\n              onChange={handleChangeWidth}\n            />\n            <div className='flex s-32 bg-transparent text-gray-300 items-center justify-center text-subhead font-semibold'>\n              PX\n            </div>\n          </div>\n          <Icon>\n            <TiTimes />\n          </Icon>\n          <div className='h-32 overflow-hidden rounded-default border border-gray-200 flex items-center justify-start'>\n            <input\n              className='border-none h-full w-40 px-6 bg-transparent font-medium m-0'\n              placeholder='0'\n              value={height}\n              onChange={handleChangeHeight}\n            />\n            <div className='flex s-32 bg-transparent text-gray-300 items-center justify-center text-subhead font-semibold'>\n              PX\n            </div>\n          </div>\n        </div>\n        <div className='flex justify-end'>\n          <Button\n            disabled={!isValid}\n            className='h-32'\n            onPress={handlePressSubmit}\n          >\n            Insert\n          </Button>\n        </div>\n      </div>\n    </Popup>\n  )\n}\n\nexport default ImageSizePopup\n","import React, { MouseEvent, FC, memo } from 'react'\nimport classnames from 'classnames'\n\ntype SegmentedControlProps = {\n  className?: string\n  value: number\n  options: Array<string>\n  onChangeValue: (value: number) => void\n}\n\nconst BaseSegmentedControl: FC<SegmentedControlProps> = ({\n  className,\n  value,\n  options,\n  onChangeValue\n}) => {\n  const handlePressOption = (e: MouseEvent, index: number) => {\n    e.preventDefault()\n    onChangeValue?.(index)\n  }\n\n  return (\n    <div\n      className={classnames(\n        'bg-gray-100 rounded-full p-4 w-296 h-40 flex items-center relative',\n        className\n      )}\n    >\n      <div\n        className='absolute bg-gray-500 rounded-full z-0 top-4 h-32 transition-all duration-500'\n        style={{ width: 144, left: 144 * value + 4 }}\n      />\n      {options.map((o, i) => (\n        <div\n          className={classnames(\n            'font-medium flex-1 flex items-center justify-center relative z-1 cursor-pointer transition-colors duration-500',\n            {\n              'text-gray-500 hover:text-gray-700': value !== i,\n              'text-white': value === i\n            }\n          )}\n          key={i}\n          onMouseDown={(e) => handlePressOption(e, i)}\n        >\n          {o}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst SegmentedControl = memo(BaseSegmentedControl)\n\nexport default SegmentedControl\n","import React, {\n  Children,\n  cloneElement,\n  FC,\n  PropsWithChildren,\n  ReactElement\n} from 'react'\nimport classnames from 'classnames'\n\ntype FieldProps = PropsWithChildren<{\n  label?: string\n  className?: string\n}>\n\nconst Field: FC<FieldProps> = ({ className, children, label }) => {\n  return (\n    <div className={className}>\n      {!!label?.length && (\n        <label className='text-blue-500 block mb-4 text-subhead font-medium'>\n          {label}\n        </label>\n      )}\n      {Children.map(children, (child: ReactElement) =>\n        cloneElement(child, {\n          className: classnames(\n            child.props.className,\n            'w-full appearance-none border border-gray-200 rounded-default h-32 px-8 transition:colors transition:shadow duration-250 focus:border-blue-500 focus:shadow-outline'\n          )\n        })\n      )}\n    </div>\n  )\n}\n\nexport default Field\n","import React, { ChangeEvent, FC, useCallback, useMemo, useState } from 'react'\nimport { useEditor, useOrphanNodes } from '../../../../core/hooks'\nimport {\n  EditableAttributes,\n  EditableElementType,\n  getEditableAttributes,\n  getEditableAttributesValidity,\n  getMatchingNodes\n} from '../../../../core/tools'\nimport Button from '../../../button'\nimport Field from '../../../field'\n\ntype EditableCopyExistingProps = {\n  onSubmit?: (attributes: EditableAttributes) => void\n}\n\nconst EditableCopyExisting: FC<EditableCopyExistingProps> = ({ onSubmit }) => {\n  const editor = useEditor()\n  const [orphanNodes] = useOrphanNodes()\n  const editableNodes = useMemo(\n    () =>\n      getMatchingNodes(\n        editor,\n        (o) => o.type === 'editable' && !(o.valueRef as string)?.length\n      )\n        .concat(orphanNodes)\n        .map((o) => o as EditableElementType<EditableAttributes>),\n    [editor, orphanNodes]\n  )\n\n  const [valueRef, setValueRef] = useState('')\n  const [defaultValue, setDefaultValue] = useState('')\n  const dataType = useMemo(\n    () => editableNodes?.find((o) => o.id === valueRef)?.dataType,\n    [editableNodes, valueRef]\n  )\n\n  const isValid = useMemo(\n    () =>\n      getEditableAttributesValidity(\n        { valueRef, defaultValue, dataType },\n        false,\n        true\n      ),\n    [dataType, defaultValue, valueRef]\n  )\n\n  const handleChangeValueRef = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      const value = e.target.value\n\n      if (value === valueRef) {\n        return\n      }\n\n      setValueRef(value)\n      setDefaultValue(\n        editableNodes.find((o) => o.id === value)?.defaultValue || ''\n      )\n    },\n    [editableNodes, valueRef]\n  )\n\n  const handleChangeDefaultValue = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      setDefaultValue(e.target.value)\n    },\n    []\n  )\n\n  const handlePressSubmit = useCallback(() => {\n    const data = getEditableAttributes({ valueRef, defaultValue, dataType })\n\n    onSubmit?.(data)\n  }, [dataType, defaultValue, onSubmit, valueRef])\n\n  return (\n    <div>\n      <Field label='Copy from' className='mb-18'>\n        <select value={valueRef} onChange={handleChangeValueRef}>\n          <option hidden value=''>\n            Choose one\n          </option>\n          {editableNodes.map((o) => (\n            <option key={o.id} value={o.id}>\n              {o.defaultValue}({o.label})\n            </option>\n          ))}\n        </select>\n      </Field>\n      <Field label='Default value' className='mb-18'>\n        <input\n          value={defaultValue}\n          onChange={handleChangeDefaultValue}\n          placeholder='Default'\n        />\n      </Field>\n      <div className='flex justify-end pt-24'>\n        <Button\n          disabled={!isValid}\n          className='h-32'\n          onPress={handlePressSubmit}\n        >\n          Insert\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default EditableCopyExisting\n","import React, { FC, memo } from 'react'\nimport ReactSwitch from 'react-switch'\n\ntype SwitchProps = {\n  className?: string\n  value: boolean\n  onChangeValue: (value: boolean) => void\n}\n\nconst BaseSwitch: FC<SwitchProps> = ({ className, value, onChangeValue }) => {\n  return (\n    <ReactSwitch\n      checked={value}\n      className={className}\n      onChange={onChangeValue}\n      offColor='#ADC5FA'\n      onColor='#326FF3'\n      checkedIcon={false}\n      uncheckedIcon={false}\n      handleDiameter={18}\n      height={22}\n      width={44}\n      activeBoxShadow='0 0 0 4px rgba(103, 126, 138, 0.125)'\n    />\n  )\n}\n\nconst Switch = memo(BaseSwitch)\n\nexport default Switch\n","import React, {\n  ChangeEvent,\n  FC,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  KeyboardEvent\n} from 'react'\nimport Button from '../../../button'\nimport Field from '../../../field'\nimport Switch from '../../../switch'\nimport { FaRegTrashAlt } from 'react-icons/fa'\nimport { AiFillPlusCircle } from 'react-icons/ai'\nimport Icon from '../../../icon'\nimport {\n  EditableAttributes,\n  EditableDataType,\n  EditableOption,\n  getEditableAttributes,\n  getEditableAttributesValidity\n} from '../../../../core/tools'\nimport {\n  DATE_FORMATS,\n  EDITABLE_DATA_TYPES,\n  TIME_FORMATS\n} from '../../../../core/constants'\nimport { formatDate, generateUUID } from '../../../../core/utils'\n\ntype EditableCreateNewProps = {\n  onSubmit?: (attributes: EditableAttributes, isOrphan?: boolean) => void\n}\n\nconst EditableCreateNew: FC<EditableCreateNewProps> = ({ onSubmit }) => {\n  const now = useRef(new Date()).current\n  const dataTypeOptions = useRef(Object.entries(EDITABLE_DATA_TYPES)).current\n  const dateFormatOptions = useRef(DATE_FORMATS.map((o) => formatDate(now, o)))\n    .current\n  const timeFormatOptions = useRef(TIME_FORMATS.map((o) => formatDate(now, o)))\n    .current\n\n  const [dataType, setDataType] = useState<EditableDataType>(\n    '' as EditableDataType\n  )\n  const [defaultValue, setDefaultValue] = useState('')\n  const [dateTimeFormat, setDateTimeFormat] = useState('')\n  const [label, setLabel] = useState('')\n  const [multiline, setMultiline] = useState(false)\n  const [options, setOptions] = useState<Array<EditableOption>>([])\n  const [editingOption, setEditingOption] = useState('')\n  const [showTip, setShowTip] = useState(false)\n  const [isOrphan, setIsOrphan] = useState(false)\n  const [tip, setTip] = useState('')\n\n  const isValid = useMemo(\n    () =>\n      getEditableAttributesValidity(\n        {\n          dataType,\n          dateTimeFormat,\n          defaultValue,\n          label,\n          options,\n          tip\n        },\n        showTip\n      ),\n    [dataType, dateTimeFormat, defaultValue, label, options, showTip, tip]\n  )\n\n  const handlePressDeleteOption = useCallback(\n    (id: string) => {\n      const eventualValue = [...options]\n      const index = eventualValue.findIndex((o) => o.id === id)\n\n      if (~index) {\n        eventualValue.splice(index, 1)\n        setOptions(eventualValue)\n      }\n    },\n    [options]\n  )\n\n  const handlePressAddOption = useCallback(() => {\n    const label = editingOption?.trim()\n\n    if (!label?.length) {\n      return\n    }\n\n    const id = generateUUID()\n\n    setOptions((groundValue) => [...groundValue, { id, label }])\n    setEditingOption('')\n  }, [editingOption])\n\n  const handleEditingOptionKeydown = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key?.toLowerCase() === 'enter') {\n        e.preventDefault()\n        handlePressAddOption()\n      }\n    },\n    [handlePressAddOption]\n  )\n\n  const handlePressSubmit = useCallback(() => {\n    const data = getEditableAttributes(\n      {\n        dataType,\n        dateTimeFormat,\n        multiline,\n        defaultValue,\n        label,\n        options,\n        tip\n      },\n      showTip\n    )\n\n    onSubmit?.(data, isOrphan)\n  }, [\n    dataType,\n    dateTimeFormat,\n    defaultValue,\n    isOrphan,\n    label,\n    multiline,\n    onSubmit,\n    options,\n    showTip,\n    tip\n  ])\n\n  const handleChangeDataType = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      const value = e.target.value as EditableDataType\n\n      if (value === dataType) {\n        return\n      }\n\n      setDataType(value)\n\n      if (value === 'date' || value === 'time') {\n        setDateTimeFormat('')\n      }\n    },\n    [dataType]\n  )\n\n  const handleChangeDateTimeFormat = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      setDateTimeFormat(e.target.value)\n    },\n    []\n  )\n\n  const handleChangeEditingOption = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      setEditingOption(e.target.value)\n    },\n    []\n  )\n\n  const handleChangeLabel = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLabel(e.target.value)\n  }, [])\n\n  const handleChangeDefaultValue = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      setDefaultValue(e.target.value)\n    },\n    []\n  )\n\n  const handleChangeTip = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTip(e.target.value)\n  }, [])\n\n  return (\n    <div>\n      <div className='flex items-end space-x-12 mb-18'>\n        <Field label='Type' className='flex-1'>\n          <select value={dataType} onChange={handleChangeDataType}>\n            <option hidden value=''>\n              Choose one\n            </option>\n            {dataTypeOptions.map(([value, label]) => (\n              <option key={value} value={value}>\n                {label}\n              </option>\n            ))}\n          </select>\n        </Field>\n        {dataType === 'text' && (\n          <div className='flex flex-1 justify-start items-center space-x-8 pb-6'>\n            <div>Multiline</div>\n            <Switch value={multiline} onChangeValue={setMultiline} />\n          </div>\n        )}\n        {dataType === 'date' && (\n          <Field label='Date format'>\n            <select\n              value={dateTimeFormat}\n              onChange={handleChangeDateTimeFormat}\n            >\n              <option hidden value=''>\n                Choose a format\n              </option>\n              {dateFormatOptions.map((o) => (\n                <option key={o} value={o}>\n                  {o}\n                </option>\n              ))}\n            </select>\n          </Field>\n        )}\n        {dataType === 'time' && (\n          <Field label='Time format'>\n            <select\n              value={dateTimeFormat}\n              onChange={handleChangeDateTimeFormat}\n            >\n              <option hidden value=''>\n                Choose a format\n              </option>\n              {timeFormatOptions.map((o) => (\n                <option key={o} value={o}>\n                  {o}\n                </option>\n              ))}\n            </select>\n          </Field>\n        )}\n      </div>\n      {['radio', 'options'].includes(dataType) && (\n        <div className='mb-18'>\n          <div className='text-blue-500 block mb-4 text-subhead font-medium'>\n            Options\n          </div>\n          <div className='space-y-6'>\n            {options?.map((o) => (\n              <div\n                key={o.id}\n                onClick={() => handlePressDeleteOption(o.id)}\n                className='flex items-center justify-between px-8 h-32 w-full border border-gray-200 bg-gray-100 rounded-default'\n              >\n                <span className='text-gray-500'>{o.label}</span>\n                <Icon className='cursor-pointer text-gray-500 transition-colors duration-250'>\n                  <FaRegTrashAlt />\n                </Icon>\n              </div>\n            ))}\n            <div className='flex items-center justify-between px-8 h-32 w-full border border-gray-200 rounded-default transition:colors transition:shadow duration-250 focus-within:shadow-outline focus-within:border-blue-500'>\n              <input\n                value={editingOption}\n                className='border-none h-full w-full bg-transparent m-0'\n                placeholder='+ Add an option'\n                onChange={handleChangeEditingOption}\n                onKeyDown={handleEditingOptionKeydown}\n              />\n              <Icon\n                onPress={handlePressAddOption}\n                className='cursor-pointer text-blue-500 transition-colors duration-250 hover:text-blue-600'\n              >\n                <AiFillPlusCircle />\n              </Icon>\n            </div>\n          </div>\n        </div>\n      )}\n      <Field label='Label' className='mb-18'>\n        <input\n          value={label}\n          onChange={handleChangeLabel}\n          placeholder='Question label'\n        />\n      </Field>\n      <Field label='Default value' className='mb-18'>\n        <input\n          value={defaultValue}\n          onChange={handleChangeDefaultValue}\n          placeholder='Default'\n        />\n      </Field>\n      <div className='flex flex-1 justify-between items-center mb-18'>\n        <div>Show description</div>\n        <Switch value={showTip} onChangeValue={setShowTip} />\n      </div>\n      {showTip && (\n        <Field label='Description' className='mb-18'>\n          <input\n            value={tip}\n            onChange={handleChangeTip}\n            placeholder='Lorem ipsum...'\n          />\n        </Field>\n      )}\n      <div className='flex flex-1 justify-between items-center mb-18'>\n        <div>Save in Icebox</div>\n        <Switch value={isOrphan} onChangeValue={setIsOrphan} />\n      </div>\n      <div className='flex justify-end pt-24'>\n        <Button\n          disabled={!isValid}\n          onPress={handlePressSubmit}\n          className='h-32'\n        >\n          Insert\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default EditableCreateNew\n","import React, { FC, useCallback, useState } from 'react'\nimport { EditableAttributes } from '../../../core/tools'\nimport Popup from '../../popup'\nimport SegmentedControl from '../../segmented-control'\nimport EditableCopyExisting from './copy-existing'\nimport EditableCreateNew from './create-new'\n\ntype EditablePopupProps = {\n  isVisible: boolean\n  onRequestClose: Fn\n  onSubmit: (attributes: EditableAttributes, isOrphan?: boolean) => void\n}\n\nconst EditablePopupProps: FC<EditablePopupProps> = ({\n  isVisible,\n  onRequestClose,\n  onSubmit\n}) => {\n  const [segment, setSegment] = useState(0)\n\n  const handleSubmit = useCallback(\n    (attributes: EditableAttributes, isOrphan = false) => {\n      onSubmit?.(attributes, isOrphan)\n      onRequestClose?.()\n      setSegment(0)\n    },\n    [onRequestClose, onSubmit]\n  )\n\n  return (\n    <Popup\n      position='center'\n      alignment='center'\n      isVisible={isVisible}\n      onRequestClose={onRequestClose}\n      hideArrow\n      overlayCloseOnClick\n      contentClassName='rounded-default'\n    >\n      <div className='rounded-default w-480 py-12 px-16 bg-white border border-gray-300 overflow-hidden'>\n        <div className='flex items-center justify-center mb-28'>\n          <SegmentedControl\n            value={segment}\n            onChangeValue={setSegment}\n            options={['Create new', 'Copy existing']}\n          />\n        </div>\n        {segment === 0 && <EditableCreateNew onSubmit={handleSubmit} />}\n        {segment === 1 && <EditableCopyExisting onSubmit={handleSubmit} />}\n      </div>\n    </Popup>\n  )\n}\n\nexport default EditablePopupProps\n","import React, {\n  ChangeEvent,\n  FC,\n  MutableRefObject,\n  useCallback,\n  useMemo,\n  useState\n} from 'react'\nimport { useEditor, useOrphanNodes } from '../../../core/hooks'\nimport {\n  EditableAttributes,\n  EditableElementType,\n  EditableRefAttributes,\n  getMatchingNodes\n} from '../../../core/tools'\nimport Button from '../../button'\nimport Field from '../../field'\nimport Popup from '../../popup'\n\ntype ConditionPopupProps = {\n  anchorRef: MutableRefObject<Element>\n  isVisible: boolean\n  onRequestClose: Fn\n  onSubmitEditing?: (value: EditableRefAttributes) => void\n}\n\nconst ConditionPopup: FC<ConditionPopupProps> = ({\n  anchorRef,\n  isVisible,\n  onRequestClose,\n  onSubmitEditing\n}) => {\n  const editor = useEditor()\n  const [orphanNodes] = useOrphanNodes()\n  const editableNodes = getMatchingNodes(\n    editor,\n    (o) =>\n      o.type === 'editable' &&\n      !(o.valueRef as string)?.length &&\n      ['options', 'radio'].includes(o.dataType as string)\n  )\n    .concat(orphanNodes)\n    .map((o) => o as EditableElementType<EditableAttributes>)\n\n  const [parent, setParent] = useState('')\n  const [value, setValue] = useState('')\n  const options = useMemo(\n    () => editableNodes.find((o) => o.id === parent)?.options || [],\n    [editableNodes, parent]\n  )\n\n  const isValid = !!parent?.length && !!value?.length\n\n  const handleChangeParent = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      const selected = e.target.value\n\n      if (selected === parent) {\n        return\n      }\n\n      setParent(selected)\n      setValue('')\n    },\n    [parent]\n  )\n\n  const handleChangeValue = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      const selected = e.target.value\n\n      if (selected === value) {\n        return\n      }\n\n      setValue(selected)\n    },\n    [value]\n  )\n\n  const handleRequestClose = useCallback(() => {\n    setParent('')\n    setValue('')\n    onRequestClose?.()\n  }, [onRequestClose])\n\n  const handlePressSubmit = useCallback(() => {\n    onSubmitEditing?.({\n      parent,\n      value\n    })\n    handleRequestClose()\n  }, [handleRequestClose, onSubmitEditing, parent, value])\n\n  return (\n    <Popup\n      position='down'\n      alignment='start'\n      isVisible={isVisible}\n      onRequestClose={handleRequestClose}\n      anchorRef={anchorRef}\n      transparent\n      hideArrow\n      overlayCloseOnClick\n      contentClassName='rounded-default'\n    >\n      <div className='rounded-default p-8 space-y-8 w-320 bg-white border border-gray-300 overflow-hidden text-gray-500'>\n        <Field label='Only show when...'>\n          <select value={parent} onChange={handleChangeParent}>\n            <option hidden value=''>\n              Choose one\n            </option>\n            {editableNodes.map((o) => (\n              <option key={o.id} value={o.id}>\n                {o.defaultValue}({o.label})\n              </option>\n            ))}\n          </select>\n        </Field>\n        <Field label='equals...'>\n          <select value={value} onChange={handleChangeValue}>\n            <option hidden value=''>\n              Choose one\n            </option>\n            {options.map((o) => (\n              <option key={o.id} value={o.id}>\n                {o.label}\n              </option>\n            ))}\n          </select>\n        </Field>\n        <div className='flex justify-end'>\n          <Button\n            disabled={!isValid}\n            className='h-32'\n            onPress={handlePressSubmit}\n          >\n            Add condition\n          </Button>\n        </div>\n      </div>\n    </Popup>\n  )\n}\n\nexport default ConditionPopup\n","import React, { FC, MutableRefObject, useCallback } from 'react'\nimport { FiInbox } from 'react-icons/fi'\nimport { useOrphanNodes } from '../../../core/hooks'\nimport Icon from '../../icon'\nimport Popup from '../../popup'\nimport { FaRegTrashAlt } from 'react-icons/fa'\n\ntype OrphanNodesPopupProps = {\n  anchorRef: MutableRefObject<Element>\n  isVisible: boolean\n  onRequestClose: Fn\n}\n\nconst OrphanNodesPopup: FC<OrphanNodesPopupProps> = ({\n  anchorRef,\n  isVisible,\n  onRequestClose\n}) => {\n  const [orphanNodes, setOrphanNodes] = useOrphanNodes()\n\n  const handlePressDelete = useCallback(\n    (id: string) => {\n      const eventualValue = [...orphanNodes]\n      const index = eventualValue.findIndex((o) => o.id === id)\n\n      if (!~index) {\n        return\n      }\n\n      eventualValue.splice(index, 1)\n      setOrphanNodes(eventualValue)\n    },\n    [orphanNodes, setOrphanNodes]\n  )\n\n  return (\n    <Popup\n      position='down'\n      alignment='end'\n      isVisible={isVisible}\n      onRequestClose={onRequestClose}\n      anchorRef={anchorRef}\n      transparent\n      hideArrow\n      overlayCloseOnClick\n      contentClassName='rounded-default'\n    >\n      <div className='rounded-default p-8 space-y-8 w-320 bg-white border border-gray-300 overflow-hidden text-gray-500'>\n        {!orphanNodes.length && (\n          <div className='flex flex-col items-center justify-center text-center py-20 space-y-4'>\n            <Icon className='text-blue-500 s-28'>\n              <FiInbox />\n            </Icon>\n            <div className='text-heading-2 font-medium'>Spick and span!</div>\n            <div className='text-subhead'>\n              Choose the <span className='text-blue-500'>Save to Icebox</span>{' '}\n              option to create standalone editables that do not appear in the\n              document.\n            </div>\n          </div>\n        )}\n        <div className='space-y-4'>\n          {orphanNodes.map(({ id, defaultValue }) => (\n            <div\n              key={id as any}\n              className='rounded-default bg-blue-500 text-white font-medium px-8 py-8 flex items-center'\n            >\n              <div className='flex-1'>{defaultValue}</div>\n              <Icon\n                onPress={() => handlePressDelete(id as any)}\n                className='cursor-pointer text-white opacity-50 transition-opacity duration-250 hover:opacity-100'\n              >\n                <FaRegTrashAlt />\n              </Icon>\n            </div>\n          ))}\n        </div>\n      </div>\n    </Popup>\n  )\n}\n\nexport default OrphanNodesPopup\n","import React, { FC, useRef, Fragment, useCallback } from 'react'\nimport IconButton from '../icon-button'\nimport { RiImage2Fill, RiImageEditFill } from 'react-icons/ri'\nimport classnames from 'classnames'\nimport { GrRedo, GrUndo } from 'react-icons/gr'\nimport {\n  MdFormatAlignCenter,\n  MdFormatAlignJustify,\n  MdFormatAlignLeft,\n  MdFormatAlignRight,\n  MdFormatBold,\n  MdFormatIndentDecrease,\n  MdFormatIndentIncrease,\n  MdFormatItalic,\n  MdFormatListBulleted,\n  MdFormatListNumbered,\n  MdFormatSize,\n  MdFormatStrikethrough,\n  MdFormatUnderlined,\n  MdTextFields,\n  MdTransform\n} from 'react-icons/md'\nimport { FiInbox } from 'react-icons/fi'\nimport Icon from '../icon'\nimport IconGroup from '../icon-group'\nimport {\n  useTextSizeValue,\n  useLeafColorValue,\n  useMouseDown,\n  usePopupUtils,\n  useAlignmentValue,\n  useEditor,\n  useCanUndo,\n  useCanRedo,\n  useConditionActive,\n  useOrphanNodes\n} from '../../core/hooks'\nimport TextSizePopup from '../popups/text-size'\nimport ColorPopup from '../popups/color'\nimport {\n  BlockAlignment,\n  createEditableNode,\n  decreaseIndentation,\n  EditableAttributes,\n  EditableRefAttributes,\n  focusEditor,\n  HeadingFormatType,\n  increaseIndentation,\n  insertEditableBlock,\n  insertImageBlock,\n  isBlockActive,\n  isMarkActive,\n  LeafFormatType,\n  setAlignment,\n  setConditionActive,\n  toggleBlockActive,\n  toggleColorMarkActive,\n  toggleMarkActive,\n  unsetConditionActive\n} from '../../core/tools'\nimport { ImageDimensions, nil, notNil } from '../../core/utils'\nimport { Transforms } from 'slate'\nimport { ALIGNMENTS } from '../../core/constants'\nimport { HistoryEditor } from 'slate-history'\nimport ImagePopup, { ImageProps } from '../popups/image'\nimport ImageSizePopup from '../popups/image-size'\nimport EditablePopupProps from '../popups/editable'\nimport ConditionPopup from '../popups/condition'\nimport OrphanNodesPopup from '../popups/orphan-nodes'\n\nconst Toolbar: FC = () => {\n  const editor = useEditor()\n  const editorSelection = useRef(editor.selection)\n\n  const textSizePopupAnchorRef = useRef(null)\n  const colorPopupAnchorRef = useRef(null)\n  const imagePopupAnchorRef = useRef(null)\n  const imageSizePopupAnchorRef = useRef(null)\n  const conditionPopupAnchorRef = useRef(null)\n  const orphanNodesPopupAnchorRef = useRef(null)\n\n  const textSizePopup = usePopupUtils()\n  const colorPopup = usePopupUtils()\n  const imagePopup = usePopupUtils()\n  const imageSizePopup = usePopupUtils()\n  const editablePopup = usePopupUtils()\n  const conditionPopup = usePopupUtils()\n  const orphanNodesPopup = usePopupUtils()\n\n  const textSizeValue = useTextSizeValue()\n  const leafColorValue = useLeafColorValue()\n  const alignmentValue = useAlignmentValue()\n  const canUndo = useCanUndo()\n  const canRedo = useCanRedo()\n  const conditionActive = useConditionActive()\n\n  const [, setOrphanNodes] = useOrphanNodes()\n\n  const handleChangeTextSizeOption = useCallback(\n    (value: HeadingFormatType) => {\n      const prevValue = textSizeValue?.name\n\n      if (value === prevValue) {\n        return\n      }\n\n      if (notNil(prevValue)) {\n        toggleBlockActive(editor, prevValue)\n      }\n\n      if (notNil(value)) {\n        toggleBlockActive(editor, value)\n      }\n\n      focusEditor(editor)\n    },\n    [editor, textSizeValue]\n  )\n\n  const handleChangeColorOption = useCallback(\n    (value: string, focus = true) => {\n      const prevValue = leafColorValue\n\n      if (value === prevValue) {\n        return\n      }\n\n      if (notNil(editorSelection.current)) {\n        Transforms.select(editor, editorSelection.current)\n      }\n\n      if (notNil(prevValue)) {\n        toggleColorMarkActive(editor, prevValue)\n      }\n\n      if (notNil(value)) {\n        toggleColorMarkActive(editor, value)\n      }\n\n      editorSelection.current = editor.selection\n\n      if (focus) {\n        focusEditor(editor)\n      }\n    },\n    [editor, leafColorValue]\n  )\n\n  const handleCreateImage = useCallback(\n    (value: ImageProps) => {\n      if (notNil(editorSelection.current)) {\n        Transforms.select(editor, editorSelection.current)\n      }\n\n      insertImageBlock(editor, value)\n      focusEditor(editor)\n    },\n    [editor]\n  )\n\n  const handleCreateEditableImage = useCallback(\n    (value: ImageDimensions) => {\n      if (notNil(editorSelection.current)) {\n        Transforms.select(editor, editorSelection.current)\n      }\n\n      insertImageBlock(editor, { dimensions: value }, true)\n      focusEditor(editor)\n    },\n    [editor]\n  )\n\n  const handleCreateEditable = useCallback(\n    (value: EditableAttributes, isOrphan = false) => {\n      if (notNil(editorSelection.current)) {\n        Transforms.select(editor, editorSelection.current)\n      }\n\n      if (isOrphan) {\n        const editableNode = createEditableNode(value, true)\n        setOrphanNodes((o) => [editableNode, ...o])\n      } else {\n        insertEditableBlock(editor, value)\n      }\n\n      focusEditor(editor)\n    },\n    [editor, setOrphanNodes]\n  )\n\n  const handleSetConditionActive = useCallback(\n    (value: EditableRefAttributes) => {\n      if (notNil(editorSelection.current)) {\n        Transforms.select(editor, editorSelection.current)\n      }\n\n      setConditionActive(editor, value)\n      focusEditor(editor)\n    },\n    [editor]\n  )\n\n  const handlePressTextSize = useMouseDown(() => {\n    textSizePopup.open()\n  })\n\n  const handlePressColor = useMouseDown(() => {\n    editorSelection.current = editor.selection\n    colorPopup.open()\n  })\n\n  const handlePressImage = useMouseDown(() => {\n    editorSelection.current = editor.selection\n    imagePopup.open()\n  })\n\n  const handlePressEditableImage = useMouseDown(() => {\n    editorSelection.current = editor.selection\n    imageSizePopup.open()\n  })\n\n  const handlePressInsertEditable = useMouseDown(() => {\n    editorSelection.current = editor.selection\n    editablePopup.open()\n  })\n\n  const handlePressCondition = useMouseDown(() => {\n    if (conditionActive) {\n      unsetConditionActive(editor)\n      return\n    }\n\n    editorSelection.current = editor.selection\n    conditionPopup.open()\n  })\n\n  const handlePressInlineFormat = useCallback(\n    (format: LeafFormatType) => {\n      toggleMarkActive(editor, format)\n    },\n    [editor]\n  )\n\n  const handlePressAlignment = useCallback(\n    (value?: BlockAlignment) => {\n      setAlignment(editor, value)\n    },\n    [editor]\n  )\n\n  const handlePressIncreaseIndentation = useCallback(() => {\n    increaseIndentation(editor)\n  }, [editor])\n\n  const handlePressDecreaseIndentation = useCallback(() => {\n    decreaseIndentation(editor)\n  }, [editor])\n\n  const handlePressNumberedList = useCallback(() => {\n    toggleBlockActive(editor, 'numbered-list')\n  }, [editor])\n\n  const handlePressBulletedList = useCallback(() => {\n    toggleBlockActive(editor, 'bulleted-list')\n  }, [editor])\n\n  const handlePressUndo = useCallback(() => {\n    HistoryEditor.undo(editor)\n  }, [editor])\n\n  const handlePressRedo = useCallback(() => {\n    HistoryEditor.redo(editor)\n  }, [editor])\n\n  return (\n    <Fragment>\n      <div className='border-t border-b border-solid border-gray-300 py-20 px-60 bg-blue-50 flex items-center divide-x divide-gray-300 text-gray-500'>\n        <div className='font-medium flex items-center'>\n          <div\n            ref={textSizePopupAnchorRef}\n            className='flex items-center w-144 space-x-4 flex-1'\n            onMouseDown={handlePressTextSize}\n          >\n            <Icon>\n              <MdFormatSize />\n            </Icon>\n            <span className='flex-1 cursor-pointer transition-colors duration-250 hover:text-blue-500'>\n              {textSizeValue?.label || 'Normal'}\n            </span>\n          </div>\n          <div\n            ref={colorPopupAnchorRef}\n            className={classnames(\n              's-28 cursor-pointer border-2 border-solid border-white mx-16 rounded-full shadow-2 transition-colors duration-250',\n              {\n                'bg-black': nil(leafColorValue)\n              }\n            )}\n            style={{ backgroundColor: leafColorValue }}\n            onMouseDown={handlePressColor}\n          />\n        </div>\n        <IconGroup>\n          <IconButton\n            data='bold'\n            active={isMarkActive(editor, 'bold')}\n            onPress={handlePressInlineFormat}\n          >\n            <MdFormatBold />\n          </IconButton>\n          <IconButton\n            data='italic'\n            active={isMarkActive(editor, 'italic')}\n            onPress={handlePressInlineFormat}\n          >\n            <MdFormatItalic />\n          </IconButton>\n          <IconButton\n            data='underline'\n            active={isMarkActive(editor, 'underline')}\n            onPress={handlePressInlineFormat}\n          >\n            <MdFormatUnderlined />\n          </IconButton>\n          <IconButton\n            data='strikethrough'\n            active={isMarkActive(editor, 'strikethrough')}\n            onPress={handlePressInlineFormat}\n          >\n            <MdFormatStrikethrough />\n          </IconButton>\n        </IconGroup>\n        <IconGroup>\n          <IconButton\n            active={nil(alignmentValue) || alignmentValue === ALIGNMENTS.left}\n            onPress={handlePressAlignment}\n          >\n            <MdFormatAlignLeft />\n          </IconButton>\n          <IconButton\n            data='center'\n            active={alignmentValue === ALIGNMENTS.center}\n            onPress={handlePressAlignment}\n          >\n            <MdFormatAlignCenter />\n          </IconButton>\n          <IconButton\n            data='right'\n            active={alignmentValue === ALIGNMENTS.right}\n            onPress={handlePressAlignment}\n          >\n            <MdFormatAlignRight />\n          </IconButton>\n          <IconButton\n            data='justify'\n            active={alignmentValue === ALIGNMENTS.justify}\n            onPress={handlePressAlignment}\n          >\n            <MdFormatAlignJustify />\n          </IconButton>\n        </IconGroup>\n        <IconGroup>\n          <IconButton onPress={handlePressDecreaseIndentation}>\n            <MdFormatIndentDecrease />\n          </IconButton>\n          <IconButton onPress={handlePressIncreaseIndentation}>\n            <MdFormatIndentIncrease />\n          </IconButton>\n        </IconGroup>\n        <IconGroup>\n          <IconButton\n            active={isBlockActive(editor, 'numbered-list')}\n            onPress={handlePressNumberedList}\n          >\n            <MdFormatListNumbered />\n          </IconButton>\n          <IconButton\n            active={isBlockActive(editor, 'bulleted-list')}\n            onPress={handlePressBulletedList}\n          >\n            <MdFormatListBulleted />\n          </IconButton>\n        </IconGroup>\n        <IconGroup>\n          <IconButton\n            ref={imagePopupAnchorRef}\n            active={imagePopup.visible}\n            onPress={handlePressImage}\n          >\n            <RiImage2Fill />\n          </IconButton>\n        </IconGroup>\n        <IconGroup>\n          <IconButton\n            ref={imageSizePopupAnchorRef}\n            active={imageSizePopup.visible}\n            onPress={handlePressEditableImage}\n            className='border border-dotted border-gray-500'\n          >\n            <RiImageEditFill />\n          </IconButton>\n          <IconButton\n            active={editablePopup.visible}\n            className='border border-dotted border-gray-500'\n            onPress={handlePressInsertEditable}\n          >\n            <MdTextFields />\n          </IconButton>\n          <IconButton\n            ref={conditionPopupAnchorRef}\n            active={conditionActive || conditionPopup.visible}\n            onPress={handlePressCondition}\n            className='border border-dotted border-gray-500'\n          >\n            <MdTransform />\n          </IconButton>\n        </IconGroup>\n        <IconGroup>\n          <IconButton onPress={handlePressUndo} disabled={!canUndo}>\n            <GrUndo />\n          </IconButton>\n          <IconButton onPress={handlePressRedo} disabled={!canRedo}>\n            <GrRedo />\n          </IconButton>\n        </IconGroup>\n        <div className='flex flex-1 items-center justify-end border-none'>\n          <IconButton\n            ref={orphanNodesPopupAnchorRef}\n            active={orphanNodesPopup.visible}\n            onPress={orphanNodesPopup.open}\n          >\n            <FiInbox />\n          </IconButton>\n        </div>\n      </div>\n      <TextSizePopup\n        anchorRef={textSizePopupAnchorRef}\n        isVisible={textSizePopup.visible}\n        value={textSizeValue?.name}\n        onPressOption={handleChangeTextSizeOption}\n        onRequestClose={textSizePopup.close}\n      />\n      <ColorPopup\n        anchorRef={colorPopupAnchorRef}\n        isVisible={colorPopup.visible}\n        value={leafColorValue}\n        onChangeColorOption={handleChangeColorOption}\n        onRequestClose={colorPopup.close}\n      />\n      <ImagePopup\n        anchorRef={imagePopupAnchorRef}\n        isVisible={imagePopup.visible}\n        onRequestClose={imagePopup.close}\n        onSubmitEditing={handleCreateImage}\n      />\n      <ImageSizePopup\n        anchorRef={imageSizePopupAnchorRef}\n        isVisible={imageSizePopup.visible}\n        onRequestClose={imageSizePopup.close}\n        onSubmitEditing={handleCreateEditableImage}\n      />\n      <EditablePopupProps\n        isVisible={editablePopup.visible}\n        onRequestClose={editablePopup.close}\n        onSubmit={handleCreateEditable}\n      />\n      <ConditionPopup\n        anchorRef={conditionPopupAnchorRef}\n        isVisible={conditionPopup.visible}\n        onRequestClose={conditionPopup.close}\n        onSubmitEditing={handleSetConditionActive}\n      />\n      <OrphanNodesPopup\n        anchorRef={orphanNodesPopupAnchorRef}\n        isVisible={orphanNodesPopup.visible}\n        onRequestClose={orphanNodesPopup.close}\n      />\n    </Fragment>\n  )\n}\n\nexport default Toolbar\n","import React, { FC } from 'react'\n\ntype TemplateEditorProps = {}\n\nconst TemplateEditor: FC<TemplateEditorProps> = ({ children }) => {\n  return <div className='max-w-6xl m-auto pt-120 px-60'>{children}</div>\n}\n\nexport default TemplateEditor\n","import { Editor, Transforms, Element as SlateElement } from 'slate'\nimport { jsx } from 'slate-hyperscript'\nimport { ReactEditor } from 'slate-react'\n\nconst ELEMENT_TAGS = {\n  A: (element: Element) => ({\n    type: 'link',\n    url: element.getAttribute('href')\n  }),\n  BLOCKQUOTE: () => ({ type: 'quote' }),\n  H1: () => ({ type: 'heading-one' }),\n  H2: () => ({ type: 'heading-two' }),\n  H3: () => ({ type: 'heading-three' }),\n  H4: () => ({ type: 'heading-four' }),\n  H5: () => ({ type: 'heading-five' }),\n  H6: () => ({ type: 'heading-six' }),\n  IMG: (element: Element) => ({\n    type: 'image',\n    url: element.getAttribute('src')\n  }),\n  LI: () => ({ type: 'list-item' }),\n  OL: () => ({ type: 'numbered-list' }),\n  P: () => ({ type: 'paragraph' }),\n  PRE: () => ({ type: 'code' }),\n  UL: () => ({ type: 'bulleted-list' })\n}\n\nconst TEXT_TAGS = {\n  CODE: () => ({ code: true }),\n  DEL: () => ({ strikethrough: true }),\n  EM: () => ({ italic: true }),\n  I: () => ({ italic: true }),\n  S: () => ({ strikethrough: true }),\n  STRONG: () => ({ bold: true }),\n  U: () => ({ underline: true })\n}\n\nexport const deserializeHTML = (el: ChildNode) => {\n  if (el.nodeType === 3) {\n    return el.textContent\n  } else if (el.nodeType !== 1) {\n    return null\n  } else if (el.nodeName === 'BR') {\n    return '\\n'\n  }\n\n  const { nodeName } = el\n  let parent = el\n\n  if (\n    nodeName === 'PRE' &&\n    el.childNodes[0] &&\n    el.childNodes[0].nodeName === 'CODE'\n  ) {\n    parent = el.childNodes[0]\n  }\n\n  const children = Array.from(parent.childNodes).map(deserializeHTML).flat()\n\n  if (el.nodeName === 'BODY') {\n    return jsx('fragment', {}, children)\n  }\n\n  if (ELEMENT_TAGS[nodeName]) {\n    const attrs = ELEMENT_TAGS[nodeName](el)\n    return jsx('element', attrs, children)\n  }\n\n  if (TEXT_TAGS[nodeName]) {\n    const attrs = TEXT_TAGS[nodeName](el)\n    return children.map((child) => jsx('text', attrs, child))\n  }\n\n  return children\n}\n\nexport const withHTML = (editor: Editor & ReactEditor) => {\n  const { insertData, isInline, isVoid } = editor\n\n  editor.isInline = (element: SlateElement) => {\n    return ['link', 'image'].includes(element.type as string)\n      ? true\n      : isInline(element)\n  }\n\n  editor.isVoid = (element) => {\n    return element.type === 'image' ? true : isVoid(element)\n  }\n\n  editor.insertData = (data) => {\n    const html = data.getData('text/html')\n\n    if (html) {\n      const parsed = new DOMParser().parseFromString(html, 'text/html')\n      const fragment = deserializeHTML(parsed.body)\n      Transforms.insertFragment(editor, fragment)\n      return\n    }\n\n    insertData(data)\n  }\n\n  return editor\n}\n","import React, { FC, PropsWithChildren, useMemo } from 'react'\nimport { useFocused, useSelected } from 'slate-react'\nimport classnames from 'classnames'\nimport { EditableElementType } from '../../../core/tools'\nimport { getPlaceholderImage } from '../../../core/utils'\n\nexport type ImageElementType = EditableElementType<{\n  url: string\n  width?: number\n  height?: number\n}>\n\ntype ImageElementProps = PropsWithChildren<{\n  attributes: any\n  element: ImageElementType\n}>\n\nconst ImageElement: FC<ImageElementProps> = ({\n  attributes,\n  children,\n  element\n}) => {\n  const selected = useSelected()\n  const focused = useFocused()\n  const url = useMemo(\n    () =>\n      element.editable\n        ? getPlaceholderImage(element.width, element.height)\n        : element.url,\n    [element.editable, element.height, element.url, element.width]\n  )\n\n  return (\n    <span {...attributes}>\n      {children}\n      <img\n        src={url}\n        style={{ width: element.width, height: element.height }}\n        className={classnames(\n          'inline-block max-w-full rounded-default align-bottom',\n          {\n            'shadow-outline': selected && focused\n          }\n        )}\n      />\n    </span>\n  )\n}\n\nexport default ImageElement\n","import React, { FC, PropsWithChildren, useEffect } from 'react'\nimport { useFocused, useSelected } from 'slate-react'\nimport classnames from 'classnames'\nimport {\n  composeWithClassName,\n  composeWithStyle,\n  EditableAttributes,\n  EditableElementType\n} from '../../../core/tools'\n\ntype EditableElementProps = PropsWithChildren<{\n  attributes: any\n  element: EditableElementType<EditableAttributes>\n}>\n\nconst EditableElement: FC<EditableElementProps> = ({\n  attributes,\n  children,\n  element\n}) => {\n  const selected = useSelected()\n  const focused = useFocused()\n\n  useEffect(() => {\n    return () => {\n      // TODO: Find refs that match unset ref value\n    }\n  }, [])\n\n  return (\n    <span\n      {...composeWithStyle(\n        composeWithClassName(\n          attributes,\n          classnames(\n            'bg-blue-500 text-white font-medium px-4 py-2 rounded-default mx-1',\n            {\n              'shadow-outline': selected && focused\n            }\n          )\n        ),\n        { fontSize: '0.82em' }\n      )}\n      contentEditable={false}\n    >\n      {element.defaultValue}\n      {children}\n    </span>\n  )\n}\n\nexport default EditableElement\n","import React, { FC, PropsWithChildren } from 'react'\nimport ImageElement, { ImageElementType } from '../elements/image'\nimport {\n  BlockAlignment,\n  composeWithAlignmentClassName,\n  composeWithClassName,\n  composeWithStyle,\n  EditableAttributes,\n  EditableElementType,\n  getIndentationPercent\n} from '../../core/tools'\nimport EditableElement from '../elements/editable'\n\nexport type ElementType =\n  | 'quote'\n  | 'code'\n  | 'bulleted-list'\n  | 'heading-one'\n  | 'heading-two'\n  | 'heading-three'\n  | 'heading-four'\n  | 'heading-five'\n  | 'heading-six'\n  | 'list-item'\n  | 'numbered-list'\n  | 'link'\n  | 'image'\n  | 'editable'\n\ntype TemplateElementType = {\n  type: ElementType\n  alignment?: BlockAlignment\n  indentation?: number\n} & ImageElementType &\n  EditableElementType<EditableAttributes>\n\ntype TemplateElementProps = PropsWithChildren<{\n  attributes: any\n  element: TemplateElementType\n}>\n\nconst TemplateElement: FC<TemplateElementProps> = ({\n  attributes,\n  children,\n  element\n}) => {\n  const { type, url, alignment, indentation } = element\n\n  switch (type) {\n    default:\n      return (\n        <p\n          {...composeWithStyle(\n            composeWithAlignmentClassName(attributes, alignment),\n            { paddingLeft: getIndentationPercent(indentation) }\n          )}\n        >\n          {children}\n        </p>\n      )\n    case 'quote':\n      return <blockquote {...attributes}>{children}</blockquote>\n    case 'code':\n      return (\n        <pre>\n          <code {...attributes}>{children}</code>\n        </pre>\n      )\n    case 'bulleted-list':\n      return (\n        <ul {...composeWithClassName(attributes, 'list-disc list-inside')}>\n          {children}\n        </ul>\n      )\n    case 'heading-one':\n      return (\n        <h1\n          {...composeWithStyle(\n            composeWithAlignmentClassName(\n              attributes,\n              alignment,\n              'text-heading-2'\n            ),\n            { paddingLeft: getIndentationPercent(indentation) }\n          )}\n        >\n          {children}\n        </h1>\n      )\n    case 'heading-two':\n      return (\n        <h2\n          {...composeWithStyle(\n            composeWithAlignmentClassName(\n              attributes,\n              alignment,\n              'text-heading-3'\n            ),\n            { paddingLeft: getIndentationPercent(indentation) }\n          )}\n        >\n          {children}\n        </h2>\n      )\n    case 'heading-three':\n      return (\n        <h3\n          {...(composeWithStyle(\n            composeWithAlignmentClassName(\n              attributes,\n              alignment,\n              'text-headline'\n            )\n          ),\n          { paddingLeft: getIndentationPercent(indentation) })}\n        >\n          {children}\n        </h3>\n      )\n    case 'heading-four':\n      return <h4 {...attributes}>{children}</h4>\n    case 'heading-five':\n      return <h5 {...attributes}>{children}</h5>\n    case 'heading-six':\n      return <h6 {...attributes}>{children}</h6>\n    case 'list-item':\n      return (\n        <li\n          {...composeWithStyle(attributes, {\n            paddingLeft: getIndentationPercent(indentation)\n          })}\n        >\n          {children}\n        </li>\n      )\n    case 'numbered-list':\n      return (\n        <ol {...composeWithClassName(attributes, 'list-decimal list-inside')}>\n          {children}\n        </ol>\n      )\n    case 'link':\n      return (\n        <a href={url} {...attributes}>\n          {children}\n        </a>\n      )\n    case 'image':\n      return <ImageElement {...{ attributes, children, element }} />\n    case 'editable':\n      return <EditableElement {...{ attributes, children, element }} />\n  }\n}\n\nexport default TemplateElement\n","import React, { FC, PropsWithChildren } from 'react'\nimport {\n  composeWithClassName,\n  composeWithStyle,\n  EditableRefAttributes\n} from '../../core/tools'\nimport classnames from 'classnames'\nimport { notNil } from '../../core/utils'\n\nexport type TemplateLeafType = Partial<{\n  bold: boolean\n  code: boolean\n  italic: boolean\n  underline: boolean\n  strikethrough: boolean\n  color: string\n  ref: EditableRefAttributes\n}>\n\ntype TemplateLeafProps = PropsWithChildren<{\n  attributes: any\n  leaf: TemplateLeafType\n}>\n\nconst TemplateLeaf: FC<TemplateLeafProps> = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.code) {\n    children = <code>{children}</code>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <del>{children}</del>\n  }\n\n  return (\n    <span\n      {...composeWithClassName(\n        composeWithStyle(attributes, { color: leaf.color }),\n        classnames({ 'bg-green-highlight': notNil(leaf.ref) })\n      )}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport default TemplateLeaf\n","import React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  KeyboardEvent\n} from 'react'\nimport classnames from 'classnames'\nimport 'tailwindcss/tailwind.css'\nimport Header from './modules/header'\nimport Toolbar from './modules/toolbar'\nimport TemplateEditor from './modules/template-editor'\nimport { withHistory } from 'slate-history'\nimport { Editable, Slate, withReact } from 'slate-react'\nimport { createEditor, Node } from 'slate'\nimport { stripHTMLEntities, toDate } from './core/utils'\nimport { withHTML } from './core/plugins/paste-html'\nimport TemplateElement from './modules/template-element'\nimport TemplateLeaf from './modules/template-leaf'\nimport { HOT_KEYS } from './core/constants'\nimport isHotkey from 'is-hotkey'\nimport { DocmakerData, SlateEditorType, toggleMarkActive } from './core/tools'\nimport { withEditable } from './core/plugins/editable'\nimport OrphanNodesContext from './core/contexts/orphan-nodes'\n\ninterface Props {\n  className?: string\n  initialValue?: DocmakerData\n  onSubmitChanges?: (data: DocmakerData) => void\n}\n\nexport const DocmakerEditor = ({\n  className,\n  initialValue,\n  onSubmitChanges\n}: Props) => {\n  const initialData = useRef(initialValue || ({} as DocmakerData)).current\n  const editor = useMemo(\n    () => withEditable(withHTML(withReact(withHistory(createEditor())))),\n    []\n  )\n  const createdAt = useRef(toDate(initialData.createdAt).toISOString()).current\n\n  const [title, setTitle] = useState(initialData.title || '')\n  const [orphanNodes, setOrphanNodes] = useState<Array<Node>>(\n    initialData.orphans || []\n  )\n  const [editorState, setEditorState] = useState<Array<Node>>(\n    initialData.nodes?.length\n      ? initialData.nodes\n      : [\n          {\n            type: 'paragraph',\n            children: [{ text: '' }]\n          }\n        ]\n  )\n\n  const renderElement = useCallback(\n    (props) => <TemplateElement {...props} />,\n    []\n  )\n\n  const renderLeaf = useCallback((props) => <TemplateLeaf {...props} />, [])\n\n  const handleEditorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      for (const hotkey in HOT_KEYS) {\n        if (isHotkey(hotkey, event as any)) {\n          event.preventDefault()\n          const mark = HOT_KEYS[hotkey]\n          toggleMarkActive(editor as SlateEditorType, mark)\n        }\n      }\n    },\n    [editor]\n  )\n\n  const handlePressSave = useCallback(() => {\n    onSubmitChanges?.({\n      title: stripHTMLEntities(title),\n      createdAt,\n      nodes: editorState as any,\n      orphans: orphanNodes as any\n    })\n  }, [onSubmitChanges, title, createdAt, editorState, orphanNodes])\n\n  return (\n    <div className={classnames('font-sans', className)}>\n      <OrphanNodesContext.Provider value={[orphanNodes, setOrphanNodes]}>\n        <Slate editor={editor} value={editorState} onChange={setEditorState}>\n          <div className='sticky top-0'>\n            <Header\n              title={title}\n              createdAt={createdAt}\n              onChangeTitle={setTitle}\n              onPressSave={handlePressSave}\n            />\n            <Toolbar />\n          </div>\n          <TemplateEditor>\n            <Editable\n              spellCheck\n              placeholder='Start typing...'\n              renderElement={renderElement}\n              renderLeaf={renderLeaf}\n              onKeyDown={handleEditorKeydown}\n            />\n          </TemplateEditor>\n        </Slate>\n      </OrphanNodesContext.Provider>\n    </div>\n  )\n}\n","import { Editor, Element as SlateElement } from 'slate'\nimport { ReactEditor } from 'slate-react'\n\nexport const withEditable = (editor: Editor & ReactEditor) => {\n  const { isInline, isVoid } = editor\n\n  editor.isInline = (element: SlateElement) => {\n    return element.type === 'editable' ? true : isInline(element)\n  }\n\n  editor.isVoid = (element: SlateElement) => {\n    return element.type === 'editable' ? true : isVoid(element)\n  }\n\n  return editor\n}\n","import React from 'react'\n\nimport { DocmakerEditor } from 'react-docmaker'\nimport 'react-docmaker/dist/index.css'\n\nconst App = () => {\n  return <DocmakerEditor onSubmitChanges={console.log} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}